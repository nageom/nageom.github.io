<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://nageom.github.io/author/nageom/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://nageom.github.io/" rel="alternate" type="text/html" />
  <updated>2021-06-12T23:48:51+09:00</updated>
  <id>https://nageom.github.io/author/nageom/feed.xml</id>

  
  
  

  
    <title type="html">nageom’s blog | </title>
  

  
    <subtitle>IT 공부방</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">hashTable과 hashMap의 차이는?</title>
      <link href="https://nageom.github.io/algorithm-basic" rel="alternate" type="text/html" title="hashTable과 hashMap의 차이는?" />
      <published>2021-06-02T09:14:00+09:00</published>
      <updated>2021-06-02T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-basic</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-basic">&lt;hr /&gt;
&lt;p&gt;해시테이블과 해시맵의 차이를 알아보기 전, 어떤 것 인지부터 알아보도록 하겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;해시테이블(Hash Table)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;키(key)와 값 (value)이 하나의 쌍으로 이루어진 데이터 구조입니다.&lt;/li&gt;
  &lt;li&gt;해시테이블은 내부적으로 배열(버킷)을 사용하여 키를 인덱스값으로 놓고 배열(버킷)에 값을 저장하는 형태입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/algorithm/hashTable/hashTable1.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;key와 value가 put()메서드로 저장될때,  &lt;br /&gt;
 key값에 해시함수를 적용해 배열의 index를 생성해냅니다. 
and 그 index스에 해당 value가 저장되는것이죠. &lt;br /&gt;
이 때, 실제 값이 저장되는 배열을 버킷 or 슬롯이라 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시함수는?
고유한 인덱스 값을 생성하는 메서드입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대표적인 해시 함수
-&amp;gt; 1. Division Method: 주소=입력값 % 테이블 크기 &lt;br /&gt;
테이블의 크기를 소수로 정해 2의 제곱수와 먼 값을 사용하는 것이 좋다.
-&amp;gt; 2. Digit Folding : 
각 Key 의 문자열을 아스키 코드로 바꾸고, 값을 합한 데이터를 데이터 내의 주소로 사용하는 방법
-&amp;gt; 3. Multiplication Method: 숫자로 된 Key값 -&amp;gt; k , 0과 1사이의 실수 -&amp;gt; A, 2의 제곱수 -&amp;gt; 을 이용하여
 h(k) = (kAmod1) x m 계산을 해준다. 
-&amp;gt; 4. Univeral Hashing : 다수의 해시함수를 만들어 집합 H에 넣어두고,
 무작위로 해시함수를 선택해 해시값을 만드는 기법&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시값이 충돌하는 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“nageom” 을 해시 함수를 돌아나온 해시값이 “dawon”의 해시함수를 돌려 나온 값과 동일하는 경우를
충돌한다 말한다.  &lt;br /&gt;
이러한 충돌을 해결하는 방법은 크게 두 가지가 있다.
&amp;lt;분리 연결법(Separate Chaining)&amp;gt;
&lt;img src=&quot;../../assets/built/images/algorithm/hashTable/hashTable1.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;분리 연결법 (Separate Chaining) 위의 그림처럼 해시값이 충돌할 경우 추가 메모리를 사용하여 다음 데이터의 주소를 저장
하는 것이다. 위의 그림처럼&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">해시테이블과 해시맵의 차이를 알아보기 전, 어떤 것 인지부터 알아보도록 하겠습니다. 해시테이블(Hash Table)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">알고리즘과 자료구조는?</title>
      <link href="https://nageom.github.io/algorithm-hashTable" rel="alternate" type="text/html" title="알고리즘과 자료구조는?" />
      <published>2021-06-01T09:14:00+09:00</published>
      <updated>2021-06-01T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-hashTable</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-hashTable">&lt;hr /&gt;
&lt;p&gt;오늘의 주제는 알고리즘과 자료구조의 차이입니다. &lt;br /&gt;
카테고리를 정하려다보니까 궁금해지더라고요. 한번 볼까요? &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자료구조와 알고리즘의 차이를 설명할때 가장 많이 나오는 예시가 도서관이더라구요.  &lt;br /&gt;
자료구조는 ‘책장에 꽂혀있는 책들의 정리&lt;em&gt;방법&lt;/em&gt;’ -&amp;gt; ex) 알파벳순, 연도순 등 &lt;br /&gt;
알고리즘은 ‘책장에서 책을 찾는 절차’ -&amp;gt; ex) 위에서 아래, 왼쪽에서 오른쪽 또는 무작위 등&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;자료구조 + 알고리즘 = 프로그램&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
자료구조는 데이터에 편하게 접근,변경하기 위한 데이터의 저장&amp;amp;조직하는 방법을 말하는 것 입니다. 
그래서 모든 목적에 맞는 자료구조는 없다 -&amp;gt; 각 자료구조가 갖는 장점과 단점을 잘 아는 것이 중요하죠.&lt;/p&gt;

&lt;p&gt;자료구조의 간단 설명!  &lt;br /&gt;
1.배열 (Array) &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_array.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;
&lt;br /&gt;
2.큐 (Queue) &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_queue.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
참고 그림처럼 마치 다 쓴 두루마리 휴지심처럼 입구와 출구가 두 개 있는 구조. &lt;br /&gt;
입구의 주소를 rear로 명시, 출구의 주소를 제일 처음들어온 친구의 주고 front로 명시해두어서 &lt;br /&gt;
데이터를 넣을때는 rear뒤로, 삭제 시에는 front에 있는 데이터를 삭제하고 front는 다음 주소로 
이동합니다. –&amp;gt; 기억을 더듬으며 적은거라 수정 요망!! :)
FIFO(First In First Out)&lt;/p&gt;

&lt;p&gt;3.스택 (Stack)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_stack.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
입/출구가 하나뿐이라 마지막에 넣은 반찬이 제일 위에 있어서 먼저 꺼내먹을 수 밖에 없는 구조.  &lt;br /&gt;
LIFO(Last In First Out)&lt;/p&gt;

&lt;p&gt;4.연결 리스트(Linked List)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_list.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
한 클래스가 데이터와 링크를 멤버로 갖고있는것입니다 &lt;br /&gt;
그래서 클1, 클2, 클3 이렇게 차례로 연결 되어있다면 &lt;br /&gt;
클1(“데이터1”, head의 주소), 클2(“데이터2”, 클1의 주소), 클3(“데이터3”, 클2의주소)… &lt;br /&gt;
이렇게 자기 앞에 주소를 갖고 찾아가는식으로 연결연결 되어있는 자료구조입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;단일 연결 리스트, 단일 원형 연결 리스트, 이중 연결 리스트, 이중 원형 연결 리스트가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.트리 (Tree)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_tree.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_tree2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.그래프 (graph)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_graph.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
관계를 그래프로 추상화하여 다룰 수 있다. 
Vertex 집합 V와 Edge집합 E에 대해 그래프 G=(V,E)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
여기까지 자료구조와 알고리즘의 간단! 설명 이였습니다.  &lt;br /&gt;
다음 게시물은 알고리즘을 하나씩 다뤄 볼 것입니다. 오늘도 열공!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘의 주제는 알고리즘과 자료구조의 차이입니다. 카테고리를 정하려다보니까 궁금해지더라고요. 한번 볼까요?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring - basic</title>
      <link href="https://nageom.github.io/Spring-basic" rel="alternate" type="text/html" title="Spring - basic" />
      <published>2021-05-25T09:28:00+09:00</published>
      <updated>2021-05-25T09:28:00+09:00</updated>
      <id>https://nageom.github.io/Spring-basic</id>
      <content type="html" xml:base="https://nageom.github.io/Spring-basic">&lt;p&gt;Spring&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="Spring" />
      

      
        <summary type="html">Spring</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Oracle-DataType_2</title>
      <link href="https://nageom.github.io/oracle-DataType_2" rel="alternate" type="text/html" title="Oracle-DataType_2" />
      <published>2021-05-25T09:14:00+09:00</published>
      <updated>2021-05-25T09:14:00+09:00</updated>
      <id>https://nageom.github.io/oracle-DataType_2</id>
      <content type="html" xml:base="https://nageom.github.io/oracle-DataType_2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 같이보기 좋은 게시물 추천 ↓↓ &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./oracle-basic_1&quot;&gt; Oracle RDBMS란? SQL은? &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./oracle-DataType_2&quot;&gt;Oracle 데이터타입? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;3) 데이터타입
   &lt;img src=&quot;./assets/built/images/create.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;데이터 타입 : 컬럼이 저장되는 데이터 유형이다. &lt;br /&gt;
이는 문자 데이터, 숫자 데이터 , 날짜 데이터, LOB 데이터 타입이 있다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="oracle" />
      

      
        <summary type="html">같이보기 좋은 게시물 추천 ↓↓ Oracle RDBMS란? SQL은? Oracle 데이터타입? 3) 데이터타입</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">REST-API JDK ERROR</title>
      <link href="https://nageom.github.io/error-JDK" rel="alternate" type="text/html" title="REST-API JDK ERROR" />
      <published>2021-05-25T09:14:00+09:00</published>
      <updated>2021-05-25T09:14:00+09:00</updated>
      <id>https://nageom.github.io/error-JDK</id>
      <content type="html" xml:base="https://nageom.github.io/error-JDK">&lt;hr /&gt;

&lt;p&gt;now.. no korean.. 
I will fix it later… &lt;br /&gt;
Error: A JNI error has occurred, please check your installation and try again
&lt;img src=&quot;../../assets/built/images/error/1.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
project right click -&amp;gt; Properties    &lt;br /&gt;
Java Compiler -&amp;gt; Compiler compliance level-&amp;gt; change version
&lt;img src=&quot;../../assets/built/images/error/2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if problem again.. 
project right click -&amp;gt; ‘Properties’ &lt;br /&gt;
‘Java Build Path’ -&amp;gt; ‘Libraries’ &lt;br /&gt;
check the ‘JRE System Library’ is red   &lt;br /&gt;
Is it red?? &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/error/3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;click ‘Add Library…’ on the right side &lt;br /&gt;
-&amp;gt;  click ‘JRE System Library’ !!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/error/4.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="error" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Java_equals와 “==”연산자의 차이</title>
      <link href="https://nageom.github.io/java-equals" rel="alternate" type="text/html" title="Java_equals와 &quot;==&quot;연산자의 차이" />
      <published>2021-05-25T09:14:00+09:00</published>
      <updated>2021-05-25T09:14:00+09:00</updated>
      <id>https://nageom.github.io/java-equals</id>
      <content type="html" xml:base="https://nageom.github.io/java-equals">&lt;hr /&gt;
&lt;p&gt;안녕하세요 오늘은 비교비교 equals 와 ‘==’ 에 대해 알아보려합니다.  &lt;br /&gt;
우선  equals는 메서드 &lt;br /&gt;
      ‘==’은 비교를 위한 연산자입니다.&lt;/p&gt;

&lt;p&gt;equals는 대상의 hashcode를 비교하고 &lt;br /&gt;
== 연산자는 대상의 주소값을 비교합니다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;hashCode란?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Object클래스는 hashCode() 라는 메서드를 가지고 있습니다 &lt;br /&gt;
hashCode() 메서드는 말그대로 hashCode를 생성해 리턴해주는 메서드이죠 &lt;br /&gt;
hashcode란 Object클래스의 메서드가 리턴하는 각 객체에 대응하는 고유한 정수값을 이야기하며     &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
기본적으로 hashCode는 객체의 주소값과 연관이 있습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/java/1.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/java/2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;비교했을때 주소값이 다른 obj와 obj2의 hashcode값이 다르죠 &lt;br /&gt;
그리고 &lt;br /&gt;
obj2의 주소값 @ 뒤의 값 6d06d69c (16진수) -&amp;gt; hashCode 1829164700(10진수) 값으로
변환이 되는것을 볼 수 있습니다. &lt;br /&gt;
&lt;br /&gt;
그렇다면 주소값으로도 hashCode처럼 대상을 비교할 수 있지않나?
그럼 equals랑 ==이랑 같게 쓰여야하는거 아닌가?
라는 생각을 했었는데  &lt;br /&gt;
멍-충 &lt;br /&gt;
주소값이 서로 다르지만 문자열은 같은 두 String 객체를 가지고 hashCode를 비교해보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/java/4.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;img src=&quot;./assets/built/images/java/3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
주소값은 다르지만 같은 문자열에 대해 hashCode가 같은 것을 볼 수 있습니다.  &lt;br /&gt;
응? 주소값으로 hashCode만드는데 주소값이 다른데 hashCode가 같네? 모순모순!  &lt;br /&gt;
이라고 할 뻔 했지만 &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;String의 hashCode() 는 재정의가 되어 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가 정답입니다.&lt;/p&gt;

&lt;p&gt;String은 문자열이고 “에이”와 “에이”가 주소가 다르다고 다른말이라면 hashCode의 의미가 없을뿐더러 발생할 수 있는 나쁜 예로  &lt;br /&gt;
-&amp;gt; HashMap에서 일치하는 key 값을 찾아낼 수 없게 되겠죠 &lt;br /&gt;
그래서 String은 hashCode를 생성할 때 주소값 말고 문자열로 생성하는 것으로 hashCode() 메서드가 재정의 된 것이랍니다.&lt;/p&gt;

&lt;p&gt;여기까지 equals메서드와 ‘==’연산자의 간단한 차이였습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;아래는 String 기본 설명 살짝 덧붙여봤습니다.&lt;/p&gt;

&lt;p&gt;우선 spring 둘의 주소값이 다른 이유&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;에이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;에이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;리터널 aa변수는 stack 메모리에, “에이”라는 문자열은 Heap 메모리 내에 String pool 이라는 곳에 저장. 그 주소가 aa변수에 저장됩니다. 
또한 String pool에 저장될때 intern() 이라는 메서드가 실행되는데  &lt;br /&gt;
intern() = 같은 값이 있는 경우 기존 값의 메모리 주소를 사용하고, 다른 값일 경우 객체를 생성해 값을 저장하고 그 메모리 주소를 리턴합니다.
Spring pool이 HashMap 자료구조 형태로 중복된 데이터 저장을 막습니다. 
그래서&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;씨&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;씨&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;라는 결과를 얻게되는것이죠.&lt;/p&gt;

&lt;p&gt;반대로  &lt;br /&gt;
 new 연산자 사용시 bb은 stack메모리에, “Hello” 는 일반 Heap 메모리 내에 생성되어 문자열이 같더라도 계속 새로운 인스턴스가 생성되게 되는것입니다. &lt;br /&gt;
그렇다면 메모리관리를 위해서라도 String은 리터널로 생성하는것이 권장되겠죠? &lt;br /&gt;
오늘도 화이팅입니다!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">안녕하세요 오늘은 비교비교 equals 와 ‘==’ 에 대해 알아보려합니다. 우선 equals는 메서드 ‘==’은 비교를 위한 연산자입니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">기술면접 예상 질문</title>
      <link href="https://nageom.github.io/java-interview" rel="alternate" type="text/html" title="기술면접 예상 질문" />
      <published>2021-05-25T09:14:00+09:00</published>
      <updated>2021-05-25T09:14:00+09:00</updated>
      <id>https://nageom.github.io/java-interview</id>
      <content type="html" xml:base="https://nageom.github.io/java-interview">&lt;hr /&gt;

&lt;h4&gt;&amp;lt;자바 JVM, 컴파일러, JDK와 JRE&amp;gt;&lt;/h4&gt;
&lt;p&gt;JRE : 자바코드가 실행 될 수 있는 환경 &lt;br /&gt;
JVM : JRE 내에 존재한다. &lt;br /&gt;
자바와 OS사이에서 중개자 역할을 수행하며 자바가 OS에 구애받지 않고 재사용을 가능하게 해준다. &lt;br /&gt;
 자바로 만들어진 프로그램을 실행할때에는 JRE설치 / 개발시에는 JDK설치 (JDK 내에 JRE 포함)&lt;/p&gt;

&lt;p&gt;자바 컴파일러(javac) : JDK가 컴파일하는 기능을 가지고 있는데 그게 javac이다.  &lt;br /&gt;
javac는 컴퓨터가 이해하는 기계어로 변환 해주는 컴파일을 하는 녀석인데   &lt;br /&gt;
정확히는 OS와 자바의 중개자인 JVM이 이해할 수 있는 형태로 컴파일된다.(바이트코드)&lt;/p&gt;

&lt;h4&gt;&amp;lt;equals와 '=='의 차이&amp;gt;  &lt;/h4&gt;
&lt;p&gt;equals는 대상의 hashcode를 비교하고 &lt;br /&gt;
‘==’ 연산자는 대상의 주소값을 비교합니다.   &lt;br /&gt;
equals는 &lt;br /&gt;
object클래스의 hashCode()메서드를 통해 각 객체에 대응하는 고유한 정수값인 hashCode를 통해 각 객체를 비교한다. &lt;br /&gt;
예외로 string은 재정의하여 문자열로 hashCode를 생성해낸다.&lt;/p&gt;

&lt;h4&gt;동기와 비동기 &lt;/h4&gt;
&lt;p&gt;동기식 처리 모델 (Synchronous processing model) 은 직렬적으로 태스크(task)를 수행한다.   &lt;br /&gt;
즉, 태스크는 순차적으로 실행되며 어떤 작업이 수행 중이면 다음 작업은 대기하게 된다.&lt;/p&gt;

&lt;p&gt;비동기식 처리 모델(Asynchronous processing model 또는 Non-Blocking processing model)은 병렬적으로 태스크를 수행한다.     &lt;br /&gt;
즉, 태스크가 종료되지 않은 상태라 하더라도 대기하지 않고 다음 태스크를 실행한다.      &lt;br /&gt;
자바에서는 대표적으로 멀티스레드의 동작이 비동기식으로 작동한다.&lt;/p&gt;

&lt;p&gt;To be continue…&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Oracle-basic_1</title>
      <link href="https://nageom.github.io/oracle-basic_1" rel="alternate" type="text/html" title="Oracle-basic_1" />
      <published>2021-05-25T09:14:00+09:00</published>
      <updated>2021-05-25T09:14:00+09:00</updated>
      <id>https://nageom.github.io/oracle-basic_1</id>
      <content type="html" xml:base="https://nageom.github.io/oracle-basic_1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 같이보기 좋은 게시물 추천 ↓↓ &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./oracle-basic_1&quot;&gt; Oracle RDBMS란? SQL은? &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./oracle-DataType_2&quot;&gt;Oracle 데이터타입? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;1) RDBMS : 관계형 데이터베이스 관리 시스템&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스의 종류: 네트워크형, 계층형, 관계형, NoSQL DB &lt;br /&gt;
그 중, 시각적으로 쉽게 데이터를 확인 할 수 있는 장점으로 가장 많이 사용되는 형태의 데이터베이스를
RDB_관계형 데이터베이스라고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/basicTable.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;행과열 조합으로 테이블 형태를 띄고있으며 각 테이블과 테이블의 관계를 제약조건에 따라 구분할 수 있으며 &lt;br /&gt;
대표적으로 Oracle, MySQL, MriaDB, MS-SQL 등이 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2)  SQL    (Oracle)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;관계형 데이터베이서 관리 시스템 (RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉! 쉽게! 데이터를 관리하기위해 사용하는 언어입니다.
백번 설명보다 해보는게 최고입니다. 바로 사용법 보도록하죠
개념적으로&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DDL_Data Definition Language (데이터 정의어)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테이블 자체를 생성,변경,삭제 등&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/ddl.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DML_Data Manipulation Language (데이터 조작어)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테이블안의 내용을 조회,삽입,삭제 등 
&lt;img src=&quot;./assets/built/images/dml.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DCL_Data Control Language (데이터 제어어)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DB에 접근하고 객체를 사용함에 대한 권한에 대한 명령어
&lt;img src=&quot;./assets/built/images/dcl.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCL_Transaction Control Language (트랜잭션 제어어)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;논리적인 작업의 단위를 묶어서 DML 에 의한 조작된 결과를 작업단위(트랜잭션)별로 제어하는 명령어 &lt;br /&gt;
 :&amp;gt; 그냥 아차! 싶은 작업을 되돌릴수도 있고, 아차! 하기전에 저장하기도 할 수 있는 명령어    &lt;br /&gt;
&lt;img src=&quot;./assets/built/images/tcl.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="oracle" />
      

      
        <summary type="html">같이보기 좋은 게시물 추천 ↓↓ Oracle RDBMS란? SQL은? Oracle 데이터타입? 1) RDBMS : 관계형 데이터베이스 관리 시스템 데이터베이스의 종류: 네트워크형, 계층형, 관계형, NoSQL DB 그 중, 시각적으로 쉽게 데이터를 확인 할 수 있는 장점으로 가장 많이 사용되는 형태의 데이터베이스를 RDB_관계형 데이터베이스라고 합니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Google Check</title>
      <link href="https://nageom.github.io/jekyll-check" rel="alternate" type="text/html" title="Google Check" />
      <published>2021-05-25T01:40:00+09:00</published>
      <updated>2021-05-25T01:40:00+09:00</updated>
      <id>https://nageom.github.io/jekyll-check</id>
      <content type="html" xml:base="https://nageom.github.io/jekyll-check">&lt;p&gt;google-site-verification: google58f7d8a62c483666.html&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="jekyll" />
      

      
        <summary type="html">google-site-verification: google58f7d8a62c483666.html</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python 강좌(2) - Python 제어문</title>
      <link href="https://nageom.github.io/python-control-statement" rel="alternate" type="text/html" title="Python 강좌(2) - Python 제어문" />
      <published>2021-05-21T01:40:00+09:00</published>
      <updated>2021-05-21T01:40:00+09:00</updated>
      <id>https://nageom.github.io/python-control-statement</id>
      <content type="html" xml:base="https://nageom.github.io/python-control-statement">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./python-address&quot;&gt;Python 강좌(1) - Python 기본&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./python-control-statement&quot;&gt;Python 강좌(2) - Python 제어문&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파이선 제어문 관련 내용&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/nageom/7dcd0b8fedc4ce5e44003d237e2fc0fa.js&quot;&gt;&lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;# Jekyll configuration
markdown: kramdown
# kramdown : markdown의 개조판.
# markdown에서 불편한 사항을 개선한 형태.

# MyData
owner:
  name:           Nageom
  avatar:         photo.jpg
  bio:            &amp;quot;Ph.D. in Computer Science&amp;quot;
  email:          nageom1123@naver.com
  # Social networking links used in footer. Update and remove as you like.
  twitter:
  facebook:
  github:
  stackexchange:
  linkedin:
  instagram:
  flickr:
  tumblr:
  # google plus id, include the &amp;#39;+&amp;#39;, eg +mmistakes
  google_plus:

highlighter: rouge
# text highlighter로 rouge이용
# 2016.02월 이후로 syntax highlighter는 rouge만 지원.
# Pygments 사용불가.

paginate: 20
# 작성한 모든 post를 하나의 페이지에 열거할 수 없으니
# pagination이 필요하고 몇개의 post를 하나의 page에서
# 보여줄 건지를 설정.

language: &amp;#39;en-uk&amp;#39;
# 언어 설정

url: https://nageom.github.io
# Google Search Console에서 사용하는 sitemap.xml 생성시
# 이 url key값이 존재하지 않으면 sitemap.xml이
# 정상적으로 생성되지 않는다.
# 또한 disqus(댓글시스템)를 이용하기 위해서도 필요.
# 자신의 github page url을 입력
# ( https://your_github_id.github.io 형식 )

baseurl: /

# Website info
title: IT Technical Training
# 자신의 blog title.

description: IT기반기술교육 블로그
# blog home에 표시될 blog에 대한 전반적인 설명.

cover: assets/built/images/ComeOn.png
# blog home에 표시될 blog cover image.

logo:
logo_dark:

#루비
favicon: assets/built/images/favicon.jpg
# favicon으로 사용할 image - title 부분

production_url: https://nageom.github.io/
# 최종적으로 blog가 운영될 url

source_url: https://github.com/moon9342/GitHubPageMaker/
# blogmaker(jekyll source folder)에 대한 github repository

# Social info
navigation: True
# Navigation bar link를 보여줄건지 여부

subscribers: True
# subscriber 기능을 사용할건지의 여부
# 저는 약간의 수정을 통해 subscriber 기능대신
# lunr.js를 이용한 검색 기능으로 대체 사용했습니다.
# 검색기능으로 대체하기 위해서
# `_includes/subscribe-form.html` 파일의 수정이 필요합니다.

twitter:
facebook:
# 만약 twitter와 facebook을 이용하면 username을 입력

# Disqus
disqus: True
disqus_shortname: xxxxxxxx
# disqus는 온라인 댓글 시스템. 댓글 기능을 사용하기 위해
# disqus를 이용할 것인지 여부와 만약 사용하면
# disqus shortname을 입력 ( disqus username이 아님 )


# Google Analytics
google_analytics: UA-xxxxxxxx-x # replace with your GA tracking identifier
# Google Analytics을 사용할 경우 GA tracking identifier를 입력

# Permalinks
permalink: /:title
# permalink: /author/:author
# permalink: /tag/:title
# 각각의 post에 고정주소를 어떤 방식으로 할당할 것인지를 결정
# 이 값을 바꾸면 작성한 포스트의 저장위치나 파일이름이 변경된다.

# gems and other configs
plugins: [jekyll-paginate, jekyll-feed, jekyll-gist]

feed:
  path: feed.xml

# Travis-CI 설정입니다.
safe: False
lsi: False

username: nageom
repo: GitHubPageMaker
# username : travis-ci와 연동하는 github의 username
# repo: travis-ci와 연동하는 github의 repository이름
# https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt;

branch: master
# 사용할 branch명

relative_source:

destination: ../[GitHubPage]/
# compile된 결과가 생성되는 폴더
# 이 폴더안의 내용이 우리가 운영하는 블로그 내용이 컴파일되서 들어간다.
# 이 폴더안의 내용을 github repository(https://username.github.io)에 push
# 만약 Travis-CI를 이용할 예정이면 이 부분을 git submodule로
# github repository(https://username.github.io)에 연결해야 한다.


# exclude는 Jekyll컴파일 시 destination에 포함될 필요가
# 없는것들을 명시한다. (node_modules와 필요없는 것들은 제외)
exclude:
  - README.md
  - Rakefile
  - Gemfile
  - Gemfile.lock
  - changelog.md
  - &amp;quot;*.Rmd&amp;quot;
  - vendor
  - .travis.yml
  - node_modules
  - assets/css
  - assets/images
  - _posts/angular
  - _posts/et-cetera
  #  - _posts/python
  - _posts/typescript
  #  - _posts/jekyll
  - _posts/iot
  - _posts/r
  - _posts/economy&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/nageom/7dcd0b8fedc4ce5e44003d237e2fc0fa.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="python" />
      

      
        <summary type="html">Python 강좌는 여러 절로 구성되어 있습니다. Python 강좌(1) - Python 기본 Python 강좌(2) - Python 제어문 파이선 제어문 관련 내용</summary>
      

      
      
    </entry>
  
</feed>
