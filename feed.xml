<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://nageom.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nageom.github.io/" rel="alternate" type="text/html" /><updated>2021-11-01T03:28:24+09:00</updated><id>https://nageom.github.io/feed.xml</id><title type="html">nageom’s blog</title><subtitle>티끌모아 공부방</subtitle><entry><title type="html">블록체인의 시작(1)_개념</title><link href="https://nageom.github.io/blockchain-start(1)" rel="alternate" type="text/html" title="블록체인의 시작(1)_개념" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(1)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(1)">&lt;hr /&gt;
&lt;p&gt;블록체인을 좀 쉽고 빠르게 습득하기 위한 포스팅. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 블록체인을 공부할 때에는 읽어도 정말 읽어도 몰랐다 &lt;br /&gt;
순서대로 했다면 이해가 더 쉬웠겠다라고 느꼈던 그대로 &lt;br /&gt;
기초부터 정리해봤다. &lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;블록체인이란?&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;블록은?&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;블록체인 : 말그대로 블록이 체인 형태로 이어져있는 형태. 개발자에게겐 노드가 체인처럼 쭉 연결되어 있는셈. 
왜 여기저기에서 블록체인 이야기가 들릴까?
그건 블록체인이 디지털 데이터를 신뢰할 수 있게 만들어준 기술이기 때문이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/blockchain.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
 블록체인은 탈중앙화(decentralization)기술이다.  &lt;br /&gt;
우리는 입출금을 하기 위해서 은행을 이용한다. 나의 계좌내역은 당연히 은행이 관리한다.
내가 친구에게 돈을 송금한 것은 은행이 증언해준다. 이렇게 어떠한 정보나 권한이 한 곳에 집중되어있는 기존방식의
보안은 은행에 집중되어있고 그만큼 해킹의 주 타겟이 된다.&lt;/p&gt;

&lt;p&gt;반대로 블록체인은 정보나 권한이 분배되어 분산되어있는 방식을 갖는다. 
내 거래내역이 은행창고에만 있는 것이 아니라 모두가 소유함으로써, 
내 거래내역을 가진 모두가 증인이며 증거가 된다.&lt;/p&gt;

&lt;p&gt;더 쉽게 생각하면, 사탕을 은행에 숨기던 방식  - 은행이 강도당하면 내 사탕도 사라짐&lt;br /&gt;
사탕을 내 이름을 적어서 사거리 신호등에 둔다 - 모두가 감시자이자 목격자. 안정성이 보장된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;은행의 데이터를 조작해서 송금 내역에 변화를 줄 수 있다면
블록체인에 올라와있는 &lt;u&gt;블록은 수정,삭제가 불가능한 형태이다.&lt;/u&gt; (아래 설명)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 블록을 알아보자. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;블록은 ? 개발자는 노드를 상상하면 이해가 쉽다. &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/blockchain2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;strong&gt;블록의 구조&lt;/strong&gt;부터 보자. 
블록은 데이터를 저장하는 단위로 블록헤더와 블록바디로 나누어져서 &lt;br /&gt;
블록헤더에는 버전, 이전 블록해시, 머클루트, 타임, 난이도 목표, 논스(nounce, 암호화와 관련되는 임의의 수) &lt;br /&gt;
블록바디에는 트랜잭션들(거래내용)이 담아져있다. &lt;br /&gt; 
트랜잭션에 많은 거래내역이 담겨있다. 일정한 시간동안의 거래내역이 한 블록에 담긴다.(약 10분이며, 코인마다 다름 )&lt;/p&gt;

&lt;p&gt;주목해야하는 부분은 블록해시이다. 이는 블록의 주소이자 이름이라 할 수 있다. 
블록은 이전 블록해시를 갖음으로써 서로 연결된 형태의 블록체인이 완성된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 위에서 말한 &lt;u&gt;블록체인의 블록은 수정, 삭제가 불가능한 형태&lt;/u&gt;라 한 이유가 이제 나온다.&lt;br /&gt;
블록해시란&lt;br /&gt;
블록헤더의 정보들(버전, 이전 블록해시, 머클루트, 타임, 난이도 목표, 논스)을 모두 합산한 후 SHA256으로 변환하여 만드는 해시 값이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, A-B-C-D-E 로 이루어진 블록체인의 B.블록의 데이터를 수정하면 그 뒤의 C의 이전 해시값이 바뀌고 C의 해시값 또한 변경되고 D, E 의 해시값 
또한 변화가 있게된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인은 서로가 감시자인 형태로 블록의 정보를 모두 공유한다. 여기에 해당되는 ‘모두’의 과반수가 갖는 정보를 신뢰하는 형태를 띄기 때문에
수정을 위해서는 이 과반수가 가진 C,D,E 블록의 해시값을 손봐야한다. 이는 천문학적인 시간과 머니가 들어 불가능에 가깝다!&lt;/p&gt;

&lt;p&gt;이로써 블록체인은 보안을 유지할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인은 새로운 신뢰/보안의 형태이다. 이제 시작이고 가야할 길이 멀고도 험하다 
 ERC20? 토큰이랑 코인? 스마트컨트랙트? 블록체인을 공부하면서 어려웠던 이것들 모두 짚고 넘어가보자.&lt;/p&gt;

&lt;p&gt;다음은 스마트컨트랙트에 대해 알아볼거다.&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인을 좀 쉽고 빠르게 습득하기 위한 포스팅.</summary></entry><entry><title type="html">블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp</title><link href="https://nageom.github.io/blockchain-start(3)" rel="alternate" type="text/html" title="블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(3)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(3)">&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;코인과 토큰의 차이.&lt;/li&gt;
  &lt;li&gt;ERC20?&lt;/li&gt;
  &lt;li&gt;Dapp(디앱)??&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. 코인과 토큰의 차이.&lt;/strong&gt;&lt;br /&gt;
코인은 자체적인 블록체인 네트워크를 가지고 웅용되어 지는 것
토큰은 코인의 기존 블록체인 네트워크를 차용해서 운용되어 지는 것이다. 
대표적인 비트코인, 이더리움 등을 제외한 대부분은 토큰이다. (이더리움의 코인 이름은 이더..!)&lt;/p&gt;

&lt;p&gt;그렇다고 영원히 토큰이냐? 그것도 아닙니다. 메인넷이라고 기존에 존재하는 플랫폼에 종속 되어있지 않고
독립적으로 생태계를 구성하는 것이 있습니다.
토큰에서 코인이 되는 과정 &lt;br /&gt;
기존 블록체인 네트워크를 기반으로 토큰을 제작하고, ICO(initial coin offering) 들을 통해 대중에게 알립니다.
(ICO: 백서를 공개한 후 신규 암호화폐를 발행해 투자자들로부터 사업 자금을 모집하는 방식)
이후 테스트넷으로 실제 실행이 잘되는지 확인하는 과정을 거쳐 이가 성공하면 메인넷이 릴리즈 된다.
독립적인 플랫폼으로 거래하고 생태계 구성이 된다는 것이다. 이게 토큰에서 코인으로 업그레이드가 되는 과정이다.
예) 이오스토큰 -&amp;gt; 이오스 코인&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.이제 ERC20이 무엇인가&lt;/strong&gt;&lt;br /&gt;
이더리움의 자체 블록체인 네트워크 상에서 발행되는 &lt;u&gt;토큰의 호환성을 보장&lt;/u&gt;하기 위한 표준 사양을 말합니다. 
위의 정의처럼 토큰은 블록체인 네트워크를 빌려 만들어진 것이잖아요? 만들때 최소한의 조건이 ERC20인거죠.&lt;br /&gt;
그래서 ERC20에 맞춘 토큰 ERC20토큰이라 부릅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Dapp(디앱)??&lt;/strong&gt;
이더리움 목적 자체는 애플리케이션 제작을 위한 플랫폼을 만드는 것이다. 
모바일의 OS 안드로이드와 iOS 처럼 블록체인계의 OS를 꿈꾸는 이더리움..!&lt;br /&gt;
스마트컨트랙트가 포함된 이더리움의 블록체인 네트워크 위에서 돌아가는 어플리케이션이라는 것..!&lt;/p&gt;

&lt;p&gt;예를 들자면 만약 30분 안에 배달이 완료되면 결제가 계약인 스마트컨트랙트를 씌운 배달의 민족이라는 어플을 Dapp이라 할 수 있다.&lt;/p&gt;

&lt;p&gt;이더리움 블록체인에서는 이더(ETH)가 사용되고, 이더리움 블록체인 상의 Dapp(디앱)은
또 다른 다양한 분야에 적용될 수 있는 각각의 솔루션으로 그에 맞는 토큰을 발행하는 것이다.&lt;/p&gt;

&lt;p&gt;본래 각각의 앱을 사용하면서 발생되는 일정부분의 포인트를 통합하여 사용하는 것은 같은 회사계열의 앱이 아닌 이상 거의 불가능하다.
하지만 이더리움 플랫폼에서는 각각의 디앱이 발행한 토큰을 통합하여 현금화하는 것이 가능하다.
디앱 내에서의 토큰 교환은 물론, 또 다른 이더리움 플랫폼을 기반으로 한 디앱의 토큰과 교환 가능한데 이를 위해서 ERC-20 토큰 표준이 만들어졌다.
다양한 디앱에 흩어져있는 ERC-20 표준 호환 토큰들은 나중에 통합되어 한 번에 이더로 모두 바꾸어 현금화 할 수 있다. 너무 좋다&lt;/p&gt;

&lt;p&gt;디앱의 종류에 대해 더 살펴보자.
&lt;img src=&quot;../../assets/built/images/blockchain/blockchain3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Contract Only : 스마트컨트랙트만으로 구성된 Dapp &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Hybrid : OffChain 서비스와 OnChain 서비스가 하나의 서비스로 이루어진 Dapp&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Save Data Only : OffChain 서비스와 함께 블록체인을 사용하지만 블록체인을 데이터 저장 용도만으로 사용하는 Dapp&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;내가 사용하는 Dapp도 여기포함되어있&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">코인과 토큰의 차이. ERC20? Dapp(디앱)??</summary></entry><entry><title type="html">블록체인의 시작(2)_스마트컨트랙트</title><link href="https://nageom.github.io/blockchain-start(2)" rel="alternate" type="text/html" title="블록체인의 시작(2)_스마트컨트랙트" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(2)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(2)">&lt;hr /&gt;
&lt;p&gt;스마트컨트랙트는 블록체인 위에 올리는 코드이다.&lt;/p&gt;

&lt;p&gt;본래는 코드대로 실행되는 계약 시스템이였지만 블록체인에 도입됨으로써 취약했던 보안과 신뢰를 보완하여 세상에 나왔다.&lt;/p&gt;

&lt;p&gt;스마트컨트랙트의 사전의미는 계약 당사자가 사전에 협의한 내용을 미리 프로그래밍하여 전자계약서 문서 안에 넣어두고,
이 계약 조건이 모두 충족되면 자동으로 계약 내용이 실행되도록 하는 시스템이다. 라고한다.&lt;/p&gt;

&lt;p&gt;단순단순히 &lt;u&gt;~할 경우 ~한다.&lt;/u&gt; 라는 코드로 볼 수 있다.
내가 봤을때 코드, 계약대로 실행되는 자동화 시스템을 말하는 것 같다. 계약이니 양방향의 동의를 얻은!&lt;/p&gt;

&lt;p&gt;한 예시로, 사업을 시작하기위해 투자를 받고 있는 예비 사업자가 있다고 하면 목표 금액을 채우지 못했을시에 사업자는 사업을 시작하지 못하고
투자자들은 돈을 돌려받지 못하는 경우의 부담감으로 투자를 주저한다.&lt;/p&gt;

&lt;p&gt;이때 목표액 이더리움 천 개를 채우지 못하면 투자 금액을 모두 돌려준다는 계약조건을 건다.&lt;br /&gt;
계약대로 투자금을 모으는 기간 동안은 지갑이 락이 걸려 출금이 금지되고 
기간이 끝나고 개수를 채우지 못했을 때
자동적으로 투자자들의 투자금이 그대로 돌려받게 되는 계약을 이행하는 것이 스마트 컨트랙트이다.&lt;/p&gt;

&lt;p&gt;지금의 은행자동이체 또한 스마트컨트랙트와 같다. 
지금의 자동이체는 은행이 주체이지만 블록체인 위의 스마트컨트랙트는 주체가 모두가 됨으로써 이의 보안이 더욱 올라간다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;이제 스마트컨트랙트? 조건을 붙여 자동실행 되도록 하는 계약이고 코드! Um~ 느낌이 왔다면&lt;/p&gt;

&lt;p&gt;그럼 다음은 ERC20에 대해 알아보자.&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">스마트컨트랙트는 블록체인 위에 올리는 코드이다.</summary></entry><entry><title type="html">쓰레드-동기화(Synchronization) (4)</title><link href="https://nageom.github.io/java-thread(5)" rel="alternate" type="text/html" title="쓰레드-동기화(Synchronization) (4)" /><published>2021-08-05T09:14:00+09:00</published><updated>2021-08-05T09:14:00+09:00</updated><id>https://nageom.github.io/java-thread(5)</id><content type="html" xml:base="https://nageom.github.io/java-thread(5)">&lt;p&gt;오늘은 &lt;u&gt;'사용해본적은 있지만 자세히는 모른다 시리즈'&lt;/u&gt;의 synchronized에 대해 포스팅해보려한다. 가보자&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 쓰레드가 진행 중인 작업을 다른 쓰레드가 간섭하지 못하도록 막는 것을 ‘쓰레드의 동기화 (synchronization)’라고 한다.&lt;/p&gt;

&lt;p&gt;알다시피 싱글 쓰레드와 다르게 멀티 쓰레드는 여러 쓰레드들이 같은 프로세스 내의 자원을 공유해 작업하기 때문에
서로의 작업에 영향이 갈 수 밖에 없다. 
A 쓰레드가 작업 중 B쓰레드가 공유자원을 임의로 변경한다면,
A 쓰레드가 작업을 마쳤을 때 원래 의도했던 것과는 다른 결과를 얻을 수 있다. 
이러한 일의 방지를 위해 도입된 개념이 ‘임계 영역(CRITICAL SECTION)’과 ‘잠금(LOCK)’이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘임계 영역(CRITICAL SECTION)’과 ‘잠금(LOCK)’&lt;/strong&gt;
공유 데이터를 사용하는 코드 영역을 임계 영역으로 지정하고, 
공유 데이터(객체)가 가지고 있는 lock을 획득한 단 하나의 쓰레드만 이 영역 내의 코드를 수행할 수 있게 한다 .
그리고 해당 쓰레드가 임계 영역 내의 모든 코드를 수행하고 벗어나서 lock을 반납해야만
다른 쓰레드가 반납된 lock을 획득하여 임계 영역의 코드를 수행할 수 있게 된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(JDK1.5 이후
java.util.concurrent.locks / 
java.util.concurrent.atomic 패키지 지원 )&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;임계 영역을 지정하는데는 두 가지 방법이 있다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//1. 메서드 전체를 지정&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 쓰레드는 synchronized메서드가 호출된 시점부터 해당 메서드가 포함된 객체의 lock을 얻어 작업을 수행하며
메서드가 종료되면 lock을 반환한다. 



*/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//2. 특정한 영역을 지정&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;객체의&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;참조변수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
메서드 내의 코드 일부를 블럭{}으로 감싸고 블럽 앞에 synchronized(참조변수)를 붙이는 것으로 
이때의 참조변수는 락을 걸고자하는 객체를 참조하는 것이어야 한다 

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 두 방법 모두 lock의 획득과 반납이 모두 자동적으로 이루어진다. 
참고로 synchronized블럭으로 임계 영역을 최소화해서 보다 효율적인 프로그램이 되도록 노력하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;출금하려는 금액이 잔고보다 작을 경우에만 출금할 수 있는 은행시스템에서 필요한 쓰레드 동기화
&lt;script src=&quot;https://gist.github.com/nageom/ba97d73b55ce060e79fb91dedc72723d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;24 줄의 메서드를 동기화하지 않으면 한 쓰레드가 출금 중, 다른 쓰레드가 balance에 영향을 줘서
balance가 음수가 되어버린다. &lt;synchronized 를=&quot;&quot; 지우고=&quot;&quot; 결과를=&quot;&quot; 확인해보자=&quot;&quot;&gt;&lt;/synchronized&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;알게된것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 예제에서 쓰레드들이 구현될때 account 객체를 따로 생성해 가지고 있을거라 생각하고
동기화 없이도 balance가 음수가 되지않을거라고 예상했고 이는 틀렸다.&lt;/p&gt;

&lt;p&gt;내가 만든 RunnableEx 안의 멤버 또는 메서드들은 모두
메인에서 구현된 쓰레드들이 같이 공유한다. 라는걸 기억해두자.&lt;/p&gt;

&lt;p&gt;참고문서 - 자바의 정석&lt;/p&gt;</content><author><name>nageom</name></author><category term="java" /><summary type="html">오늘은 '사용해본적은 있지만 자세히는 모른다 시리즈'의 synchronized에 대해 포스팅해보려한다. 가보자</summary></entry><entry><title type="html">쓰레드-실행제어편 (4)</title><link href="https://nageom.github.io/java-thread(4)" rel="alternate" type="text/html" title="쓰레드-실행제어편 (4)" /><published>2021-08-03T09:14:00+09:00</published><updated>2021-08-03T09:14:00+09:00</updated><id>https://nageom.github.io/java-thread(4)</id><content type="html" xml:base="https://nageom.github.io/java-thread(4)">&lt;p&gt;쓰레드의 스케줄링을 위해 기초지식 다지기&lt;br /&gt;
쓰레드 프로그래밍이 어려운 이유가 동기화(synchronization)과 스케줄링(scheduling) 때문이다. 
이를 잘하기 위해서는 쓰레드의 상태와 관련 메서드의 공부가 필요하다. 
그래서 공부할 것들을 적어봤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쓰레드의 상태&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NEW - 쓰레드가 생성되고 아직 START()가 호출되진 않은 상태&lt;br /&gt;
RUNNABLE - 실행 중 OR 실행 가능 상태&lt;br /&gt;
BLOCKED - 동기화블럭에 의해 일시정지된 상태&lt;br /&gt;
WAITING - 실행가능하지 않은(unrrunnable) 일시정지 상태&lt;br /&gt;
TIMED_WAITING - 일시정지시간이 지정된 경우의 상태&lt;br /&gt;
TERMINATED - 작업이 종료, 소멸&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쓰레드의 상태는  Thread의 getState()를 호출해서 확인할 수 있다. (JDK1.5 이상 부터)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쓰레드의 스케줄링과 관련된 메서드와 쓰레드의 움직임을 나타낸 그림이다. 
&lt;img src=&quot;../../assets/built/images/java/thread/thread(4)_1.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;
이걸보면 쓰레드를 머릿속에 그리기 더 쉬울 것이다.&lt;br /&gt;
1) 쓰레드 생성 후, start()를 호출하면 일단 실행대기열에 저장된다. &lt;br /&gt;
실행대기열은 큐와 같은 구조로 가장 앞 쓰레드가 먼저 실행된다. &lt;br /&gt;
2) 실행대기상태에서 차례로 실행한다. &lt;br /&gt;
3) 주어진 실행시간이 다되거나 yield()룰 만나면 다시 실행대기열에 들어간다 (제일 뒷자리)&lt;br /&gt;
4) 실행 중에 suspend(), sleep(), wait(), join(), I/O block에 의해 일시정지상태가 될 수 있다.
I/O block은 입출력작업에서 발생하는 지연상태를 말한다. 사용자가 입력을 마치면 다시 실행대기 상태가 된다.&lt;br /&gt;
5) 지정된 일시정지시간이 다되거나(time-out), notify(), resume(), interrupt()가 호출되면
일시정지상태를 벗어나 다시 실행대기열에 저장되어 자신의 자례를 기다리게 된다. &lt;br /&gt;
6) 실행을 모두 마치거나 stop()이 호출되면 쓰레드는 소멸된다.&lt;/p&gt;

&lt;p&gt;위에 적은 메서드들의 실습을 모두 적으면 좋겠지만 너무 길고 많아서 
간단히 보고 떠올릴 수 있을정도만 적으려한다. (자바 750pg참조)&lt;/p&gt;

&lt;h6&gt;sleep(long millis) - 일정시간동안 쓰레드를 멈추게 한다. &lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;try - catch문으로 예외처리 필수 (일시정지 상태에서 실행대기 상태가 되기 때문)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;일정시간동안&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;쓰레드를&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;멈추게&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;한다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쓰레드 생성&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//이런 참조변수를 이용해서 호출할 수 있다. &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;th1.sleep(2000); &lt;br /&gt;
이 메서드는 특정 쓰레드의 참조변수를 사용해서 그 특정 쓰레드를 멈추는 메서드가 아니다. 
th1.sleep을 호출했어도 실제로 영향을 받는 것은 main메서드를 실행하는 main쓰레드이다. 
sleep()메서드는 static으로 선언되어 있어 참조변수를 이용해서 호출하기 보다는
“Thread.sleep(2000);”과 같이 해야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메서드 하나하나 올리기엔 좀 귀..ㅊ…ㅣㅏㄴㅎ아서 틈틈ㅎ ㅣ올리는걸로! (2021-08-04 업데이트) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;interrupt() - 쓰레드의 작업을 취소시킨다. &lt;br /&gt;
멈추는게 아니고 취소시킨다! 
너무 오래걸리는 다운로드를 취소시킬때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쓰레드에 interrupt() 호출&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;보면 알 수 있듯이 interrupted()는 interrupted상태를 반환한다. &lt;br /&gt;
void interrupt() - 쓰레드의 interrupted상태를 false -&amp;gt; true로 전환 &lt;br /&gt;
boolean isInterrupted () -쓰레드의 interrupted상태를 그냥 반환. &lt;br /&gt;
static boolean interrupted() - 쓰레드의 interrupted상태를 반환하고, false로 변경 &lt;br /&gt;
더 자세한 예시는 책에서 확인 ( 753pg ) - (2021-08-08 업데이트)
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;suspend() - sleep()처럼 쓰레드를 멈추기함. resume()을 호출해서 다시 실행대기 상태가 되고
stop() 호출 시 즉시 종료 
일반적인 쓰레드 사용 메서드들이지만 교착상태(deadlock)을 일으키기 쉬워 사용이 권장되지 않는다. (‘deprecated’되어있음)
(고로 예시는 안적음)&lt;/p&gt;

&lt;p&gt;yield() -  다른 쓰레드에게 양보한다. interrupt()를 적절히 사용하여 효율적인 실행을 가능케한다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yiledTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;***&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;th3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;suspend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;suspend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;th3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InterruptedExveption&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;suspended&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stopped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;ThreadEx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쓰레드 생성&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//뤈뤈 &lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    
    
    
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고문서 - 자바의 정석&lt;/p&gt;</content><author><name>nageom</name></author><category term="java" /><summary type="html">쓰레드의 스케줄링을 위해 기초지식 다지기 쓰레드 프로그래밍이 어려운 이유가 동기화(synchronization)과 스케줄링(scheduling) 때문이다. 이를 잘하기 위해서는 쓰레드의 상태와 관련 메서드의 공부가 필요하다. 그래서 공부할 것들을 적어봤다.</summary></entry><entry><title type="html">쓰레드 정리 (3)</title><link href="https://nageom.github.io/java-thread(3)" rel="alternate" type="text/html" title="쓰레드 정리 (3)" /><published>2021-07-29T09:14:00+09:00</published><updated>2021-07-29T09:14:00+09:00</updated><id>https://nageom.github.io/java-thread(3)</id><content type="html" xml:base="https://nageom.github.io/java-thread(3)">&lt;h6&gt; 첫번째 알아볼 쓰레드 정의는 &lt;/h6&gt;
&lt;p&gt;쓰레드는 우선순위(priority)이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쓰레드의 우선순위&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쓰레드는 우선순위(priority)라는 멤버변수를 가지고 있어 ,이 우선순위의 값에 따라
쓰레드가 얻는 실행시간이 달라진다. &lt;br /&gt;
어떨 때 쓰느냐하면 
카톡을 사용할때 파일 다운로드를 처리하는 쓰레드보다 채팅내용을 전송하는 쓰레드의 우선순위가 더 높아야 
사용자가 채팅하는데 불편함이 없을 것이다. 대신 파일다운로드 작업에 걸리는 시간은 더 길어질테지만,
이러한 작업의 중요도에 따라 쓰레드의 우선순위를 서로 다르게 지정하여 특정 쓰레드가 더 많은 작업시간을 갖도록 하는 것이 
우선순위의 용도이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;쓰레드의 우선순위 지정하기&lt;/strong&gt; &lt;br /&gt;
void setPriority(int newPriority) //쓰레드의 우선순위를 지정한 값으로 변경한다.&lt;br /&gt;
int getPriority() //쓰레드의 우선순위를 반환한다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;우선순위의 범위는 1~10이며 숫자가 높을수록 우선순위가 높다. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;쓰레드의 우선순위는 쓰레드를 생성한 쓰레드로부터 상속받는다. &lt;br /&gt;
main메서드를 수행하는 쓰레드는 우선순위가 5이므로 main메서드내에서 생성하는 쓰레드의 우선순위는 자동적으로 5가 된다. &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예제
&lt;script src=&quot;https://gist.github.com/nageom/6245e8f2c3c6359706127c8607187d0e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;결과
&lt;img src=&quot;../../assets/built/images/java/thread/thread(3)_priority.png&quot; alt=&quot;ex_screenshot&quot; /&gt; 
main쓰레드의 우선순위 5를 상속받은 th1과 th2 중,
th2만 우선순위를 7로 변경한 다음 start()를 호출해서 쓰레드를 실행시켰다. 
결과를 보면 우선순위가 높은 th2의 실행시간이 th1에 비해 늘고 더 우선시 되었다는것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/java/thread/thread(3)_priority2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
빨간 t1,t2은 실행이 끝난 시점을 나타냄&lt;/p&gt;

&lt;p&gt;위의 발로 그린 그림은 싱글 코어로 두 개의 쓰레드로 두개의 작업을 실행했을 때의 
결과를 그림으로 나타낸 것인데,
우선순위가 같은 경우 각 쓰레드에게 거의 같은 양의 실행시간이 주어지지만, 
우선순위가 다르다면 우선순위가 높은 th2에게 상대적으로 th1보다 더 많은 양의 실행시간이 주어지고
결과적으로 작업 A가 B보다 더 빨리 완료될 수 있다. 
싱글코어에서는 이렇다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 멀티코어에서는 쓰레드의 우선순위에 따른 차이가
전혀 없었다. 완전 한번씩 돌아가며 실행됐다. 
결국 멀티코어에서는 쓰레드에 높은 우선순위로 실행시간과 실행기회를 줄 수 없다는 것이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;멀티코어라 해도 OS마다 다른 방식으로 스케쥴링하기 때문에, 어떤 OS에서 실행하느냐에 따라
다른 결과를 얻을 수 있어 굳이 우선순위에 차등을 두어 쓰레드를 실행하려면 특정 OS의 스케쥴링 정책과
JVM의 구현을 직접 확인해봐야 한다. 
만일 확인한다 하더라도 어느 정도 예측만 가능하지 정확히 알 수는 없어,
차라리 쓰레드에 우선순위를 부여하는 대신 작업에 우선순위를 두어 PriorityQueue에 저장해두고,
우선순위가 높은 작업에 먼저 처리되도록 하는 것이 나을것이라 한다.&lt;/p&gt;

&lt;h6&gt;두번째는 쓰레드의 또 다른 유형인 &lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;데몬 쓰레드(daemon thread)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;데몬 쓰레드는 다른 일반 쓰레드의 작업을 돕는 보조적인 역할을 수행하는 쓰레드이다 
일반 쓰레드가 모두 종료되면 데몬 쓰레드는 강제적으로 자동 종료되는데, 그 이유는 앞서 말했듯이
일반 쓰레드의 보조역할을 수행하기 때문이다.&lt;/p&gt;

&lt;p&gt;데몬 쓰레드의 예로는 가비지 컬렉터, 워드프로세서의 자동저장, 화면자동갱신 등이 있다.&lt;/p&gt;

&lt;p&gt;데몬 쓰레드는 &lt;u&gt;무한루프와 조건문을 이용해서 실행 후 대기하고 있다가 특정 조건이 만족되면 작업을 수행하고 
다시 대기하도록 작성한다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;데몬 쓰레드를 만들어볼건데, 일단 일반 쓰레드 생성와 동일하게 생성하고 실행전에 setDaemon(true)를 호출한다.&lt;br /&gt;
boolean isDaemon() //데몬 쓰레드인지 확인 &lt;br /&gt;
void setDaemon(boolean on) //쓰레드를 데몬쓰레드로 변경 &lt;br /&gt;
//on의 값을 true로 지정해야함. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/java/thread/thread(3)_priority3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3초마다 변수 autoSave의 값을 확인해서 그 값이 true이면 autoSave()를 호출하는 일을 무한히
반복하도록 쓰레드를 작성했다.
무한 반복임에도 프로그램은 종료되었다.&lt;/p&gt;

&lt;p&gt;만일 setDaemon메서드를 호출하지 않은 일반 쓰레드라면 강제종료를 하지 않는 이상 종료되지 않을 것이다.
&lt;img src=&quot;../../assets/built/images/java/thread/thread(3)_priority4.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;신기신기&lt;/p&gt;

&lt;h6&gt;세번째는 &lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;쓰레드 그룹(thread group)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쓰레드 그룹은 서로 관련된 쓰레드를 그룹으로 다루기 위한 것으로,
폴더를 생성해서 관련된 파일들을 함께 넣어서 관리하는 것처럼 그룹을 생성해서 쓰레드를 구룹으로 묶어서 
관리할 수 있다. 
또한 폴더 안에 폴더생성이 가능하듯이 쓰레드 그룹에 다른 쓰레드 그룹을 포함 시킬 수 있다.
쓰레드 그룹은 보안상의 이유로 도입되어 자신이 속한 쓰레드 그룹이나 하위 쓰레드 그룹은 변경 가능하지만
다른 쓰레드 그룹의 쓰레드는 변경 불가능.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;쓰레드 그룹에서 알아둘 점&lt;/u&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 쓰레드는 반드시 그룹에 포함되어 있어야한다.&lt;/li&gt;
  &lt;li&gt;자바 어플리케이션이 실행되면, JVM은 main과 system이라는 쓰레드 그룹을 만들고
JVM운영에 필요한 쓰레드들을 생성해서 이 쓰레드 그룹에 포함시킨다.&lt;/li&gt;
  &lt;li&gt;우리가 생성한 모든 쓰레드 그룹은 MAIN쓰레드 그룹의 하위 쓰레드 그룹이 되며,
그룹을 지정하지 않은 쓰레드는 자동으로 main쓰레드 그룹에 속하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;쓰레드를 쓰레드 그룹에 포함시키려면 Thread의 생성자를 이용한다.
Thread(ThreadGroup group, Runnable target, String name)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본 쓰레드 그룹 생성, 지정 예시&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//main 안에서&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Group1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//쓰레드 그룹 생성&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Thread(ThreadGourp tg, Runnable r, String name)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쓰레드 그룹 포함 &amp;amp; 실행&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 이 메서드로 main쓰레드 그룹의 정보를 출력한다. &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고문서 - 자바의 정석&lt;/p&gt;</content><author><name>nageom</name></author><category term="java" /><summary type="html">첫번째 알아볼 쓰레드 정의는 쓰레드는 우선순위(priority)이다.</summary></entry><entry><title type="html">쓰레드- start()와 run() (2)</title><link href="https://nageom.github.io/java-thread(22)" rel="alternate" type="text/html" title="쓰레드- start()와 run() (2)" /><published>2021-07-13T09:00:00+09:00</published><updated>2021-07-13T09:00:00+09:00</updated><id>https://nageom.github.io/java-thread(22)</id><content type="html" xml:base="https://nageom.github.io/java-thread(22)">&lt;p&gt;쓰레드를 구현하고 나면서 드는 생각이 있었다. &lt;br /&gt;
쓰레드를 실행시킬 때 run()과 start()를 구분해서 사용할까?
그래서 이 둘에 대해 자세히 알아보았다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//구현&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyThread01&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//실행&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ex01&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;MyThread01&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mt01&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyThread01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// run을 호출(XXX) start사용	&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;mt01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;간단히 말해서&lt;br /&gt;
&lt;strong&gt;run()&lt;/strong&gt; - main메서드에서 run()만을 호출하는 것은 생성된 쓰레드를 실행시키는 것이 아니라 단순히 클래스에 선언된 메서드를 호출하는 것일 뿐이다.&lt;br /&gt;
반면에 &lt;strong&gt;start()&lt;/strong&gt; - 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택(call stack)을 생성한 다음에 run()을 호출해서
생성된 호출스택에 run()이 첫 번째로 올라가게 한다.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;main 또한 쓰레드이다.&lt;br /&gt;
프로그램의 시작과 함께 생성되는 하나의 쓰레드가 main메서드를 호출하여 작업이 수행되도록 하는데 &lt;br /&gt;
1) 그렇다면 호출스택에 main이 가장 아래 깔리게 된다. &lt;br /&gt;
2) 이후 start()가 호출되어 main 위로 올라가고 새로운 쓰레드를 생성하고, 쓰레드가 작업하는데 사용될 호출스택을 새로 생성한다. &lt;br /&gt;
3) 그리하여 그 호출스택에 run()이 호출되어, 쓰레드가 독립된 공간에서 작업을 수행한다. start는 할일을 다해서 종료됨. &lt;br /&gt;
4) 이렇게 생긴 main의 호출스택과 새로 생성된 run의 호출스택 두개가 남게된다. &lt;br /&gt;
물론,  main쓰레드 호출스택은 run쓰레드의 종료와 상관없이 임무를 마치면 혼자 사라진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일부러 새로 생성한 쓰레드에서 예외를 발생시키고 예외가 발생한 당시의 호출스택을 출력하는 예제로
쓰레드 간의 영향을 확인해보자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&quot;https://gist.github.com/nageom/d05e50c02edae4efdf30a21cd0821470.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;결과
&lt;img src=&quot;../../assets/built/images/java/thread/thread(2)_1.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
호출스택&lt;br /&gt;
&lt;strong&gt;&lt;u&gt;|throwException&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;u&gt;|run&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;호출스택의 첫 번째 메서드가 main메서드가 아닌 run메서드인 것을 확인할 수 있다.
즉, 한 쓰레드가 예외를 발생해서 종료되어도 다른 쓰레드의 실행에는 영향을 미치지 않는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;start()로 쓰레드를 생성함과 동시에 호출스택을 생성해 내는것을 한번 더 기억하자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;4. 그렇다면 run()으로 쓰레드를 바로 실행하면 어떻게 될까?&lt;/u&gt; &lt;br /&gt;
호출스택&lt;br /&gt;
&lt;strong&gt;&lt;u&gt;|throwException&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;u&gt;|run&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;u&gt;|main&lt;/u&gt;&lt;/strong&gt;&lt;br /&gt;
이런 식으로 하나의 main쓰레드 호출스택에서 호출된다.&lt;/p&gt;</content><author><name>nageom</name></author><category term="java" /><summary type="html">쓰레드를 구현하고 나면서 드는 생각이 있었다. 쓰레드를 실행시킬 때 run()과 start()를 구분해서 사용할까? 그래서 이 둘에 대해 자세히 알아보았다.</summary></entry><entry><title type="html">힙 정렬(Heap Sort)</title><link href="https://nageom.github.io/algorithm-heap-sort" rel="alternate" type="text/html" title="힙 정렬(Heap Sort)" /><published>2021-07-12T09:14:00+09:00</published><updated>2021-07-12T09:14:00+09:00</updated><id>https://nageom.github.io/algorithm-heap%20sort</id><content type="html" xml:base="https://nageom.github.io/algorithm-heap-sort">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;힙이란??&lt;/strong&gt;
최댓값이나 최솟값을 찾아내는 연산을 빠르게 하기위해 고안된 완전 이진트리를 기본으로 한 자료구조입니다. 
최소힙, 최대힙이 있는데 트리 루트가 최솟값인지, 최댓값인지에 따라 구분된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트리란 ??&lt;/strong&gt;
부모와 자식 노드로 구성된 형태의 그래프이다. 
이진트리는 한 부모노드가 자식을 두개만 갖는 경우를 말한다. 
완전 이진트리는 모든 부모노드가 자식을 두개씩 다 가지고 있고
왼쪽부터 노드가 채워져있어야한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;완전 이진트리가 아닌 경우 
&lt;img src=&quot;../../assets/built/images/algorithm/sort/heap(1)_2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[실제 코드를 짤때 알고있어야할 힙 구조의 배열저장 형식  ]&lt;/strong&gt;
&lt;img src=&quot;../../assets/built/images/algorithm/sort/heap(1)_4.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h6&gt;힙의 높이 (h) = logN 이다. (간선의 수)&lt;/h6&gt;
&lt;p&gt;루트노드에서 한 칸씩 내려올때마다 N의 크기가 두배씩 늘어나는데 
몇 번 늘어나면 N개가 되느냐를 생각해보면 이해하기 쉽다.
&lt;img src=&quot;../../assets/built/images/algorithm/sort/heap(1)_3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;최대힙 (Max-Heapify)
이진트리 하나씩 부모노드와 자식노드들을 비교해서 가장 큰 값이 부모노드의 값이 되도록 하여
최상위 루트 노트의 값이 가장 크고 내려갈수록 작아지는 구조의 힙&lt;/p&gt;

&lt;h6&gt;최대힙의 수행시간&lt;/h6&gt;
&lt;p&gt;n을 하위 트리의 노드의 개수라고 할 때,
노드의 값을 바꿀 때 수행시간 : O(1)    //단순히 값을 이동시키기 때문에 상수시간이 가능하다. 
힙의 높이 O(h) = O(logN) 
따라서 전체 수행시간은 O(logN)이다.
&lt;br /&gt;
참고강의 https://www.youtube.com/watch?v=ehNVf2Bcm2Q&lt;/p&gt;</content><author><name>nageom</name></author><category term="algorithm" /><summary type="html">힙이란?? 최댓값이나 최솟값을 찾아내는 연산을 빠르게 하기위해 고안된 완전 이진트리를 기본으로 한 자료구조입니다. 최소힙, 최대힙이 있는데 트리 루트가 최솟값인지, 최댓값인지에 따라 구분된다.</summary></entry><entry><title type="html">탐욕법 구명보트</title><link href="https://nageom.github.io/coding-greedy(4)" rel="alternate" type="text/html" title="탐욕법 구명보트" /><published>2021-07-10T09:14:00+09:00</published><updated>2021-07-10T09:14:00+09:00</updated><id>https://nageom.github.io/coding-greedy(4)</id><content type="html" xml:base="https://nageom.github.io/coding-greedy(4)">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;프로그래머스 &amp;gt; 탐욕법 &amp;gt; 구명보트&lt;/strong&gt;&lt;br /&gt;
문제 설명&lt;br /&gt;
무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.&lt;br /&gt;
예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.&lt;/p&gt;

&lt;p&gt;구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.&lt;/p&gt;

&lt;p&gt;사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;p&gt;제한사항
무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/coding/greedy(4)_1.jpg.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h6&gt;풀이과정&lt;/h6&gt;
&lt;p&gt;해도해도 안풀려서 질문하기를 봤는데, 
문제 설명에 ‘구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고’를 무시한 사람들이 있었다.
그리고 그게 나였다. 이 조건을 무시하니 테스트케이스에서 막혔다.&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/coding/greedy(4)_3.jpg.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;img src=&quot;../../assets/built/images/coding/greedy(4)_2.jpg.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후에 다시 코드를 짜는데 
배열을 둘 씩 묶어서 연산을 해볼까 했는데, 그렇게되면 제약이 너무너무 많아서 패스하고
정렬된 배열의 가장 작은 값과 큰값으로 연산을 사용하니 쉽게 풀 수 있었다. 
어렵지 않아서 코드를 보면 이해가 될거다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greedy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LifeBoat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	 &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        
	        &lt;span class=&quot;nx&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//50 50 70 80&lt;/span&gt;
	       
	        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	        	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        		&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	        	
	        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	       
	        
	        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
		&lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	
	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
커버사진 출처 프로그래머스&lt;/p&gt;</content><author><name>nageom</name></author><category term="coding" /><summary type="html">프로그래머스 &amp;gt; 탐욕법 &amp;gt; 구명보트 문제 설명 무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다. 예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.</summary></entry><entry><title type="html">탐욕법 큰 수 만들기</title><link href="https://nageom.github.io/coding-greedy(3)" rel="alternate" type="text/html" title="탐욕법 큰 수 만들기" /><published>2021-07-09T09:14:00+09:00</published><updated>2021-07-09T09:14:00+09:00</updated><id>https://nageom.github.io/coding-greedy(3)</id><content type="html" xml:base="https://nageom.github.io/coding-greedy(3)">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;프로그래머스 &amp;gt; 탐욕법 &amp;gt; 큰 수 만들기&lt;/strong&gt;&lt;br /&gt;
문제 설명&lt;br /&gt;
어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.&lt;br /&gt;
예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.&lt;/p&gt;

&lt;p&gt;문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.&lt;/p&gt;

&lt;p&gt;제한 조건
number는 1자리 이상, 1,000,000자리 이하인 숫자입니다.
k는 1 이상 number의 자릿수 미만인 자연수입니다.
&lt;img src=&quot;../../assets/built/images/coding/greedy(3)_2.jpg.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h6&gt;풀이과정&lt;/h6&gt;

&lt;p&gt;모랄까.. 느낌은 알겠는데 도저히 코드가 안나와서 다른 분의 코드를 해석했다. 
&lt;img src=&quot;../../assets/built/images/coding/greedy(3)_1.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고 코드 https://velog.io/@hyeon930/&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;알게된것&lt;/strong&gt;&lt;br /&gt;
int num = number.charAt(j) - ‘0’;&lt;br /&gt;
문자열-‘0’을 하면 문자열를 정수로 바꿔 받을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
커버사진 출처 프로그래머스&lt;/p&gt;</content><author><name>nageom</name></author><category term="coding" /><summary type="html">프로그래머스 &amp;gt; 탐욕법 &amp;gt; 큰 수 만들기 문제 설명 어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다. 예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.</summary></entry></feed>