<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://nageom.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nageom.github.io/" rel="alternate" type="text/html" /><updated>2021-11-07T22:53:14+09:00</updated><id>https://nageom.github.io/feed.xml</id><title type="html">nageom’s blog</title><subtitle>티끌모아 공부방</subtitle><entry><title type="html">블록체인의 시작(7)_ERC20토큰 만들기</title><link href="https://nageom.github.io/blockchain-start(8)" rel="alternate" type="text/html" title="블록체인의 시작(7)_ERC20토큰 만들기" /><published>2021-11-06T09:00:00+09:00</published><updated>2021-11-06T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(8)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(8)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;오늘은 ERC20토큰을 만들어보기~! &lt;br /&gt;
전 포스팅을 하나식 보셨다면 이더리움 관련 개발은 
Remix IDE가 필요하다~ 를 아실거에요 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘은 &lt;u&gt;ERC20토큰을 만드는데 필요한 개발도구&lt;/u&gt;는&lt;br /&gt;
Remix IDE , 메타마스크(암포화폐 지갑), 토큰 올릴 가스비 (이더) , 제공된 ERC20 소스코드 
가 있습니다.&lt;/p&gt;
&lt;h6&gt;ERC20 토큰 만들기의 큰 흐름은&lt;/h6&gt;
&lt;p&gt;일단 Remix IDE에서 ERC20 소스코드를 가지고 토큰을 만들거구요.&lt;br /&gt;
토큰을 만들어서 배포할때 필요한 가스비(이더)는 Ropsten 테스트넷에서 받아올겁니다.&lt;/p&gt;

&lt;h6&gt;1. 테스트용 Ether 받아오기&lt;/h6&gt;
&lt;p&gt;&lt;br /&gt;
이제 스마트컨트랙트를 배보할 때 Gas가 필요하다는 것을 아실텐데,
기존에는 가나슈에서 가상계정과 이더를 제공해줬기 때문에
배포시 필요한 가스를 지불 할 수 있었지만 
현재는 실제 우리의 메타마스크를 사용하기때문에 이번엔 가스비가 필요합니다. 어떡하지.. 했는데
이럴때 사용할 수 있는 테스트용 이더가 있더라지요~ 
요 사이트는 Rinkeby, Ropsten 등이 있지만
저는 Rinkeby 에서 페북에 게시물 올리고 어쩌구해야하는데 하다가 실패했기 때문에&lt;/p&gt;

&lt;p&gt;Ropsten 테스트넷에서 받아올겁니다. &lt;br /&gt;
&lt;a href=&quot;https://faucet.dimensions.network/&quot;&gt;https://faucet.dimensions.network/&lt;/a&gt; &lt;br /&gt;
이 사이트에 본인 메타마스크 계정을 넣어주기만 하면 바로 받으실 수 있습니다. (간단해서 첨부안함)&lt;/p&gt;

&lt;p&gt;받고나면 내 지갑의 Ropsten 테스트 네트워크 항목에서 이더를 확인하실 수 있습니다. (네트워크 항목 선택하셔야해요!)
&lt;img src=&quot;../../assets/built/images/blockchain/bc31.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h6&gt;2. ERC20 소스코드 받아오기&lt;/h6&gt;
&lt;p&gt;&lt;br /&gt;
디어리움에서 제공하는 ERC20 소스코드를
&lt;a href=&quot;https://etherscan.io/address/0x6D0F5149c502faf215C89ab306ec3E50b15e2892#code&quot;&gt;https://etherscan.io/address/0x6D0F5149c502faf215C89ab306ec3E50b15e2892#code&lt;/a&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc32.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
복사하시면 돼요.
Copy source code to clipboard 클릭&lt;/p&gt;

&lt;h6&gt;3. Remix IDE 로 ERC20토큰 만들기&lt;/h6&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://remix.ethereum.org/&quot;&gt;https://remix.ethereum.org/&lt;/a&gt;
workspace에 Ballot.sol 파일 내용을 지우고 &lt;br /&gt;
ERC20 소스코드를 붙여줍니다. 
&lt;img src=&quot;../../assets/built/images/blockchain/bc33.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;
38번 줄의 컨트랙트를 수정해주세요. 만들 토큰의 관한 정보입니다.&lt;br /&gt;
컨트랙트 이름은 내 토큰이름으로. (띄어쓰기 없이)&lt;br /&gt;
그 아래 생성자 constructor의 name, symbol 항목도 고쳐준다. &lt;br /&gt;
name은 토큰이름,&lt;br /&gt;
symbol은 내 토큰별칭 이라 생각하면 됨. &lt;br /&gt;&lt;br /&gt;
««««««이제 배포준비 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ENVIRONMENT : Injected Web3 선택,&lt;br /&gt;
ACCOUT: 리믹스와 메타마스크 연결되어 내 지갑계정을 확인할수있음&lt;br /&gt;
내 지갑에 연결됨(초록) 이 뜨는것도 확인됨&lt;br /&gt;
☆중요중요☆ CONTRACT: 컨트랙트는 내가 아까 수정한 컨트랙트 선택
&lt;img src=&quot;../../assets/built/images/blockchain/bc34.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;deploy: 코드를 이더리움에 배포 클릭!
&lt;img src=&quot;../../assets/built/images/blockchain/bc35.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
올릴때 가스비가 소비하나요? 라는 안내문이 뜹니다. 확인 클릭
&lt;br /&gt;&lt;br /&gt;
잠깐 시간이 지나면 터미널에 블록이 생성되었다고 뜹니다. 
&lt;img src=&quot;../../assets/built/images/blockchain/bc38.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h6&gt;4.테스트넷에서 트랜잭션 확인, 메타마스크에 잔고확인 &lt;/h6&gt;
&lt;p&gt;우리가 테스트넷 이더를 받은 곳 ropsten의 이더스캔을 이용해 방금 우리가 일으킨 트랜잭션을 자세히 볼 수 있다. 
&lt;a href=&quot;https://ropsten.etherscan.io/&quot;&gt;ropsten.etherscan&lt;/a&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc37.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
이곳에 transaction hash를 검색&lt;br /&gt;
   (transaction hash는 뒤에 Remix에서 배포 후 터미널에 블록생성이 됐다는 알림에서 얻을 수 있습니다.)&lt;br /&gt;
검색 후 컨트랙트 배포에 대한 정보를 확인 할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Interatcted With(To) 클릭 -&amp;gt; 만든 토큰의 정보확인 &lt;br /&gt;
Tracker 클릭 / 이때 나온 Contract: 주소를 복사한다. &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc39.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
이유는 메타마스크는 이더 코인 전용이라 그 외의 코인,토큰들은 따로 추가해줘야하기 때문
&lt;img src=&quot;../../assets/built/images/blockchain/bc40.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
import tokens 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc41.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내가 만든 토큰이 추가됨을 확인할 수 있습니다.야호
&lt;img src=&quot;../../assets/built/images/blockchain/bc41.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 오늘은 ERC20토큰을 만들어보기~! 전 포스팅을 하나식 보셨다면 이더리움 관련 개발은 Remix IDE가 필요하다~ 를 아실거에요</summary></entry><entry><title type="html">블록체인의 시작(6)_스마트컨트랙트 작성(1)</title><link href="https://nageom.github.io/blockchain-start(6)" rel="alternate" type="text/html" title="블록체인의 시작(6)_스마트컨트랙트 작성(1)" /><published>2021-11-03T09:00:00+09:00</published><updated>2021-11-03T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(6)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(6)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;오늘은 스마트컨트랙트 개발을 해볼겁니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 개발도구&lt;/strong&gt; &lt;br /&gt;
먼저 개발환경 조성부터 샤샥 나열해보겠습니다.&lt;br /&gt;
Solidity(솔리디티) : 이더리움의 스마트컨트랙트 프로그래밍 언어입니다. &lt;br /&gt;
Truffle(트러플): 컴파일, 배포, 디버깅을 지원하는 개발 도구입니다. &lt;br /&gt;
Ganache(가나슈) : 가상의 이더리움 네트워크를 생성해줘서 스마트 컨트랙트를 실행할 수 있게해주는 모듈입니다.&lt;br /&gt;
-&amp;gt; https://www.trufflesuite.com/ganache 에서 다운로드 &lt;br /&gt;
IDE는 인텔리제이를 사용했습니다. 설치하지 않은 경우에는 Remix를 이용하세요 &lt;br /&gt;
-&amp;gt; https://remix.ethereum.org/&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 트러플 설치&lt;/strong&gt;&lt;br /&gt;
cmd 오픈&lt;br /&gt;
-&amp;gt; npm install -g truffle  (npm으로 트러플 설치 )&lt;br /&gt;
-&amp;gt; truffle version (버전 확인)&lt;br /&gt;
Truffle v5.4.16 (core: 5.4.16)&lt;br /&gt;
Solidity v0.5.16 (solc-js)     &lt;br /&gt;
Node v11.15.0&lt;br /&gt;
Web3.js v1.5.3&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 프로젝트 생성&lt;/strong&gt;&lt;br /&gt;
-&amp;gt; mkdir smartsample (트러플 프로젝트 만들기 위한 폴더 생성 )&lt;br /&gt;
-&amp;gt; cd smartsample&lt;br /&gt;
-&amp;gt; truffle init (트러플로 프로젝트 초기화)&lt;br /&gt;
-&amp;gt; dir 폴더 안 확인&lt;br /&gt;
2021-10-30  오전 01:16 contracts ( 스마트컨트랙트 작성 )&lt;br /&gt;
2021-10-30  오전 01:16 migrations (배포 디렉터리)&lt;br /&gt;
2021-10-30  오전 01:16 test (단위 테스트 공간)&lt;br /&gt;
1985-10-26  오후 05:15  4,900 truffle-config.js ( 트러플 관련 설정 파일) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 인텔리제이 오픈&lt;/strong&gt;&lt;br /&gt;
이제 contracts 디렉터리 안에 스마트컨트랙트를 작성한다. &lt;br /&gt;
-&amp;gt; contracts/HelloWorld.sol 생성 &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
&lt;span class=&quot;c1&quot;&gt;//컨트랙트 이름 HelloWorld가 됨&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//상태변수&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//세터&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;astr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;astr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//출력메서드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1) solidity 버전 변경&lt;br /&gt;
-&amp;gt; truffle-config.js 내에 compilders 키 안에 version부분을 최신으로 수정, &lt;br /&gt;
솔리디티파일의 pragma solidity 도 수정 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 컴파일&lt;/strong&gt;&lt;br /&gt;
솔리디티 파일 HelloWorld를 컴파일한다.&lt;br /&gt;
PS C:\smartsample&amp;gt; truffle compile&lt;br /&gt;
build/contracts/컴파일된 json 파일들 생성됨&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc6.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;강제 컴파일시 (수정이 없을시)&lt;br /&gt;
PS C:\smartsample&amp;gt; truffle compile –all &lt;br /&gt;
***
컴파일된 HelloWorld.json 파일에서 &lt;br /&gt;
bytecode는 실제로 이더리움 메인넷상에 블록안에 심어지게되서 실제 evm 상에서 동작하는 바이트코드가 된다.&lt;br /&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;abi (Application binary Interface)는&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;배포후 어플리케이션에서 바이트코드와 통신할때 사용되는 인터페이스를 정의해놓은 하나의 데이터이다. &lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc17.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc18.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TMI! 혹시 컴파일된 json 파일의 생성위치를 바꾸고싶다면
&lt;img src=&quot;../../assets/built/images/blockchain/bc7.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 가나슈 (가상의 이더리움 네트워크을 이용해보자) , 이더리움 네트워크 접속&lt;/strong&gt; &lt;br /&gt;
가나슈 다운로드 &lt;br /&gt;
-&amp;gt; https://www.trufflesuite.com/ganache &lt;br /&gt;
실행 - Quick Start 클릭 (트랜잭션을 저장하지 않음)&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc9.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
10개의 가상 계정에 각 100이더의 잔액있음 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;truffle-config.js에 가상의 이더리움 네트워크 접속 정보 입력 &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc8.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 배포&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;migrations 디렉토리에 1_initial_migration.js 처럼 배포할 js 파일을 생성한다.&lt;br /&gt;
생성시 이름은 1 다음 숫자 2로 지어준다. &lt;br /&gt;
2_deploy_helloworld.js&lt;br /&gt;
이유는 이 숫자를 보고 순서대로 배포되기 때문임!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2_deploy_helloworld.js&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*네이밍 중요
* 순번 중요
* 순번 기준으로 배포함
/*
module.exports = function (deployer) {
  deployer.deploy(HelloWorld, &quot;HelloWorld&quot;);
                // 생성자 아규먼트 (생성할때 파라미터 필요 )
};
*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;배포 명령어&lt;/strong&gt;&lt;br /&gt;
PS C:\smartsample&amp;gt; truffle migrate –network development&lt;br /&gt;
트러플아 network키에서 develpoment 파라미터를 갖고 migrate해라! &lt;br /&gt;
기본 명령어는 &lt;br /&gt;
PS C:\smartsample&amp;gt; truffle migrate&lt;br /&gt;
강제 배포&lt;br /&gt;
PS C:\smartsample&amp;gt; truffle migrate –reset &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;** 확인**&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc10.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
1_initial_migration.js와 2_deploy_helloworld.js 둘 다 실행됐다. &lt;br /&gt;
가스비가 빠져나간것도 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;가나슈에서도 확인 
&lt;img src=&quot;../../assets/built/images/blockchain/bc11.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;0.01이더가 빠져나갔다. 구우웃&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 오늘은 스마트컨트랙트 개발을 해볼겁니다.</summary></entry><entry><title type="html">자바스크립트 backtick(`)과 single quoto(‘) 나만 주의..</title><link href="https://nageom.github.io/error-typescript" rel="alternate" type="text/html" title="자바스크립트 backtick(`)과 single quoto(‘) 나만 주의.." /><published>2021-11-03T09:00:00+09:00</published><updated>2021-11-03T09:00:00+09:00</updated><id>https://nageom.github.io/error-typescript</id><content type="html" xml:base="https://nageom.github.io/error-typescript">&lt;hr /&gt;

&lt;p&gt;오늘 겪은 오류는 
&lt;img src=&quot;../../assets/built/images/error/5.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;
응? 뭐라는거야..&lt;br /&gt;
쟤는 서있고 쟤는 좀 누워있네..하고 찾아보니까 backtick (`) 이라고하는 새로운 문자연결 표기방식으로 키보드 &lt;strong&gt;(Shift + ~)&lt;/strong&gt;를 치면 나온다&lt;/p&gt;

&lt;p&gt;자바스크립트는 처음이라 진짜 몰랐다.. 
어디에 쓰이는고.. 하니&lt;/p&gt;

&lt;p&gt;처음에 내가 겪은 오류 
&lt;img src=&quot;../../assets/built/images/error/6.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;
&lt;img src=&quot;../../assets/built/images/error/7.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;
아니 다들 홀따옴표 썼는데 &lt;u&gt;${}(place holder)&lt;/u&gt; 안에 변수 읽히던데 왜!! 나만 안돼!!!라고 했는데 
사실 홀따옴표가 아니역따 ㅎ&lt;/p&gt;

&lt;h5&gt;backtick (`)&lt;/h5&gt;

&lt;p&gt;얘의 명칭은 grave accent &lt;br /&gt;
backtick, backquoto 라고도 불리며
‘억음부호’라는 한국이름도 있다.&lt;br /&gt;
&lt;u&gt;자바스크립트 ES6 부터 백틱 기호를 사용한 문자열을 템플릿 리터널&lt;/u&gt;이라고 부른다.&lt;br /&gt;&lt;br /&gt;
새로운 문자연결 표기방식인데,&lt;br /&gt;
기존에 console.log(“내 이름은” + name + “나이는”+ age); 식의 문자열 출력이 &lt;br /&gt;
따옴표(““)와 더하기 기호(+) 없이 백틱 기호 하나로  &lt;br /&gt;
console.log(`내 이름은 ${name} 나이는 ${age}) 가 한줄에 출력 가능해진다.&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/error/8.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;
&lt;img src=&quot;../../assets/built/images/error/9.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/zzal/gaebiscon.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;
나처럼 이걸로 헤매는 사람은 없겠ㅣ..&lt;/p&gt;</content><author><name>nageom</name></author><category term="error" /><summary type="html"></summary></entry><entry><title type="html">블록체인의 시작(7)_스마트컨트랙트 작성(2)</title><link href="https://nageom.github.io/blockchain-start(7)" rel="alternate" type="text/html" title="블록체인의 시작(7)_스마트컨트랙트 작성(2)" /><published>2021-11-03T09:00:00+09:00</published><updated>2021-11-03T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(7)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(7)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h6&gt;지난 포스팅에서는 IDE를 IntelliJ를 사용했습니다. 
이번 포스팅은 이더리움에서 제공하는 IDE Remix를 사용하는 포스팅입니다.&lt;/h6&gt;

&lt;p&gt;시작전에 간단하게 스마트컨트랙트 배포의 큰 줄기는 
코드작성 -&amp;gt; 컴파일 -&amp;gt; 가상 블록체인 네트워크 연결 -&amp;gt; 배포
(로 생각하고 가시면 좋을것같습니다. )&lt;/p&gt;

&lt;p&gt;암튼 스타또 &lt;br /&gt;
가나슈를 켜두시고 &lt;br /&gt;
&lt;strong&gt;Remix 접속&lt;/strong&gt;&lt;br /&gt; -&amp;gt; &lt;a href=&quot;https://remix.ethereum.org&quot;&gt;https://remix.ethereum.org&lt;/a&gt; &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc16.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
일단 제일 왼쪽에&lt;br /&gt;
첫번째 아이콘은 File explorers&lt;br /&gt;
두번째 아이콘은 Solidity Compiler&lt;br /&gt;
세번째 아이콘은 Deploy &amp;amp; run transactions&lt;br /&gt;
차례대로 작성, 설정해보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. File explorers&lt;/strong&gt;&lt;br /&gt;
Workspace 이다. 프로젝트 구성도 전 포스팅과 유사하다 &lt;br /&gt;
스마트컨트랙트를 작성하는 constracts, 테스트 &lt;br /&gt;
컴파일된 파일은 constracts/artifacts/ 하위로 들어간다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;전과 같이 constracts/HelloWorld.sol 작성,&lt;br /&gt;
(이번엔 simple_storage.sol 하나를 더 만들었다)&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc19.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Solidity Compiler&lt;/strong&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc20.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
말그대로 컴파일러 관련 설정파트이다. &lt;br /&gt;
&lt;strong&gt;COMPILER&lt;/strong&gt;는 &lt;u&gt;버전 설정&lt;/u&gt; -&amp;gt; 안정적인 버전으로 추천. 나는 0.8.4버전 사용&lt;br /&gt;
&lt;strong&gt;LANGUAGE&lt;/strong&gt;는 &lt;u&gt;솔리디티 선택&lt;/u&gt;&lt;br /&gt;
자동 컴파일 체크&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;TMI! 컴파일할 파일을 클릭하고 돌아와야 파란색 Compile 버튼이 클릭 가능하다.&lt;br /&gt;
그리고 Compilation Details를 클릭하면 컴파일된 bytecode와 abi 확인이 가능하다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컴파일된 json 파일은 constracts/artifacts 하위로 들어간다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Deploy &amp;amp; run transactions&lt;/strong&gt;&lt;br /&gt;
배포파트! 그리고 트랜잭션 설정이다. &lt;br /&gt;
가나슈의 네트워크와 연결하기위해 &lt;strong&gt;ENVIRONMENT&lt;/strong&gt; 로 &lt;strong&gt;Web3 Provider&lt;/strong&gt; 클릭
&lt;img src=&quot;../../assets/built/images/blockchain/bc21.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
연결완료!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc14.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
가나슈의 가상 계정들이 ACCOUNT 항목에서도 나타나는걸 볼 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 배포!!Deploy 클릭 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저는 배포를 세번 했고 블럭이 생성되었다고 띠롱띠롱뜹니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc22.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc23.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
가나슈에서도 블록이 생성된것을 확인 할 수 있습니다. &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc24.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
Transaction 을 누르면 방금 배포를 하면서 발생시킨 transaction이 들어있습니다.&lt;/p&gt;

&lt;p&gt;이렇게 Remix 에서 스마트 컨트랙트 작성과 배포를 마쳤습니다.&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 지난 포스팅에서는 IDE를 IntelliJ를 사용했습니다. 이번 포스팅은 이더리움에서 제공하는 IDE Remix를 사용하는 포스팅입니다.</summary></entry><entry><title type="html">블록체인의 시작(5)_블록체인 이해하기</title><link href="https://nageom.github.io/blockchain-start(5)" rel="alternate" type="text/html" title="블록체인의 시작(5)_블록체인 이해하기" /><published>2021-11-02T09:00:00+09:00</published><updated>2021-11-02T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(5)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(5)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;블록체인은 대충 알겠고 그래서 코드는 어떻게 쓰는데? &lt;br /&gt;
해서 냅다 니콜라스의 도움으로 typescript로 간단 블록체인 구조를 생성해보았다.&lt;/p&gt;

&lt;p&gt;일단 왜 타입스크립트를 사용? 
자바스크립트가 갖고있지 않는 규칙을 가지고 있다. 
-&amp;gt; 대형 프로젝트, 팀으로 일할 경우 버그를 최소화하기 좋다
-&amp;gt; 언어가 예측 가능하고 읽기 쉬운 코드로 자바스크립트를 더 잘 사용할 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;먼저, &lt;strong&gt;기본 설정&lt;/strong&gt; &lt;br /&gt;
Yarn 은 프로젝트의 의존성을 관리하는 JavaScript의 패키지 매니저&lt;br /&gt;
= Java의 gradle&lt;/p&gt;

&lt;p&gt;npm 보다 빠르고 안전하며 npm과 같이 자바스크립트 패키지의 저장소를 제공할 뿐만 아니라
시스템에서 의존 패키지 설치하거나 업데이트하는 등의 다양한 명령을 제공, package.json을 통해 의존 패키지를 구분한다.&lt;/p&gt;

&lt;p&gt;하지만 나는 yarn 이 돌아가지 않아서 npm을 사용했다. &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.yarn initialize &lt;br /&gt;
(&amp;gt; yarn init) 또는 
(&amp;gt;npm init ) &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.타임스크립트 설치  &lt;br /&gt;
(&amp;gt; yarn global add typescript) 
또는
(&amp;gt; npm install typescript)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3.tsconfig.json 파일 생성 &lt;br /&gt;
타임스크립트가 어떻게 자바스크립트로 컴파일 할지 명시해둘 파일&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/bc4.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;4.index.ts 파일 생성&lt;br /&gt;
블록체인 만들 ts 파일 -&amp;gt; 컴파일하면 index.js가 생성됨&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5.컴파일은 tsc 또는 npx tsc &lt;br /&gt;
여기까지하고 컴파일 실행해보자&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;6.tsc-watch 패키지 설치&lt;br /&gt;
원래는 ts코드가 바뀔때마다 js로 컴파일 하고 node로 실행&lt;br /&gt;
-&amp;gt; ts코드가 수정 될때마다 자동으로 컴파일하고 js를 실행해줌 (쉽게 말해 tsc의 watch모드 )&lt;br /&gt;
(&amp;gt; yarn add tsc-watch –dev 또는 npm add tsc-watch –dev)&lt;br /&gt;
그니까 tsc, yarn start, yarn start를 계속 안쳐도 수정될때마다 알아서 컴파일, 실행 되서 출력값 띄워줌&lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/blockchain/bc5.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
참고로 yarn으로 init했을때와 npm 으로 init했을때의 package.json 형태가 다르다. &lt;br /&gt;
yarn의 경우 “script”가 없으니 추가해주면 되고&lt;br /&gt;
npm의 경우 “test”까지 만들어져있으니 “start”만 추가해준다. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;블록체인 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.이제 index.ts에 냅다 블록 구조 만들기&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previouHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.블록 생성과 블록체인배열 생성 시험&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//블록 생성&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;genesisBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;202020202020&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 블록 배열 생성 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;genesisBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;지난번 블록 설명 포스팅에서 블록의 이름 블록해시는 블록이 가진 여러요소들의 합을 SHA256으로 변환한 값이라고 했다.&lt;br /&gt;
3.그럼 해시값을 만들어볼까나!&lt;br /&gt;
 crypto-js 설치부터!&lt;br /&gt;
(&amp;gt; yarn add crypto-js 또는 npm install crypto-js)&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//import 추가&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CryptoJS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;crypto-js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//블록 클래스 안에 블록해시를 만드는 static calculateBlockHash 함수 추가  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculateBlockHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;CryptoJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SHA256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//블록생성하는 함수 생성 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createNewBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;previousBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLatesBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;newIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;newTimestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNewTimeStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;newHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;previousBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;newTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;newBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
     &lt;span class=&quot;nx&quot;&gt;newHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
     &lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;newTimestamp&lt;/span&gt; 
   &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;addBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//블록체인에 블록 추가 --아래에 추가되있음&lt;/span&gt;
   
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 블록을 검증하는 절차를 거쳐야지.&lt;br /&gt;
4.구조와 해시값을 검증한다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//블록의 구조 검증 메서드 (블록 클래스 내에 추가) &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateStructure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;typeoff&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//블록해시 값이 맞는지 확인하는 메서드 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getHashforBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculateBlockHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//블록의 해쉬가 유효한가 , 따로 해쉬를 계산해서, 들어온 블록의 해쉬가 실제로 있는지 체크&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;5.위 두 검증을 거치는 isBlockValid 메서드 생성&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//candidate 블럭과 previous 블럭을 비교 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isBlockValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validateStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//구조 검증 &lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//인덱스 검증 &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// preHash 검증&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHahforBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 현 블록해시 검증 &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//블록의 해쉬가 유효한가 , 따로 해쉬를 계산해서, 들어온 블록의 해쉬가 실제로 있는지 체크&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.createNewBlock 에서 사용할 블록체인에 블록 추가하기 메서드&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBlockValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLastBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;createNewBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;첫 블록&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;createNewBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;아더 블록&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 블록체인은 대충 알겠고 그래서 코드는 어떻게 쓰는데? 해서 냅다 니콜라스의 도움으로 typescript로 간단 블록체인 구조를 생성해보았다.</summary></entry><entry><title type="html">블록체인의 시작(4)_디파이</title><link href="https://nageom.github.io/blockchain-start(4)" rel="alternate" type="text/html" title="블록체인의 시작(4)_디파이" /><published>2021-11-01T09:00:00+09:00</published><updated>2021-11-01T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(4)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(4)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;디파이와 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1. 디파이(De-fi)란?&lt;/strong&gt;&lt;br /&gt;
탈중앙화 금융(Decentralized Finance)의 약자로서, 탈중앙화된 분산금융 또는 분산재정을 의미한다. 
탈중앙화는 저번 포스팅에서 설명했고, 은행처럼 예치, 대출이 가능하지만 실제화폐가 아닌
암호화폐로 거래된다는 점이 다르다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.디파이 서비스&lt;/strong&gt;&lt;br /&gt;
탈중앙화 금융서비스는 무엇을 제공할까? &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;암호화폐 예치와 대출&lt;br /&gt;
테더를 예치한 A와, 이더리움을 담보로 테더 대출하려는 B가 있다. (이때 대출받는 측(B)의 이자와 수수료가 투자자(A)에게 수익으로 작용된다.)
가치 변동성이 적은 코인을 팔지않고 예치함으로써 B의 대출이자와 수수료로 수익을 보는 A &lt;br /&gt;
변동성이 큰 코인(이더)를 팔고싶지않을때 이더를 담보로 테더를 대출 받을 수 있는 B&lt;br /&gt;
모두에게 이득이다.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;자산토큰화&lt;br /&gt;
개인투자자들도 고가의 부동산이나 예슬품에 쉽게 투자할 수 있도록 자산 소유권을 소액으로 나누는 것을 말한다. 
여러 개로 나눠진 소유권을 블록체인 기술로 암호화하여 저장하는 것을 토큰화, 이를 자산토큰화라고 한다. &lt;br /&gt;&lt;br /&gt;
예시로 100억원 상당의 빌딩을 5000원의 부동산 디지털 수익증권으로 200만여개로 나누어 공모를 진행한다. 
개인 투자자는 원하는 만큼의 디지털 수익증권을 살 수 있다. 
이걸 삼으로써 임대료를 받거나 매각할 때 시세차익을 벌 수 있고
또는 차익이 벌어질때 보유한 수익증권을 마켓플레이스에서 매매할 수 있다. &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;스테이킹&lt;br /&gt;
스테이킹(staking)은 암호화폐의 일정량을 지분으로 고정시키는 행위이다. &lt;br /&gt;
스테이킹 서비스란 저축과 유사한 개념으로 사용자가 가진 암호화폐를 블록체인 네트워크 운영에 활용할 수 있도록 맡기고, 그 대가로 수익 보상을 받는 서비스다.
일반 예치와 다른점이 바로
예치만 하는 것이 아니라 데이터 검증에 참여하여 암호화폐를 보상받는 점이다. 
이 절차를 복잡하게 느끼는 일반투자자들을 위해 전문적으로 스테이킹과 데이터 검증을 하는 서비스를 제공하는 업체도 등장했다. &lt;br /&gt;
(대표적으로 스테이크드, 스테이크피쉬, 업비트 등이 있다)&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;덱스 거래&lt;br /&gt;
덱스 = (Decentralized Exchange) 탈중앙화 거래소&lt;br /&gt;
덱스 거래 = 탈중앙화 환전, 스왑&lt;br /&gt;&lt;br /&gt;
원화와 달러를 환전함을 생각하면되는데 사실 덱스 거래는 많이 다르다. 
기존에 은행이 달러나 원화를 어느정도 보유하고 있는 방식이 아니라 투자자가 예치한 암호화폐들로 환전이 이루어지는 방식이다. &lt;br /&gt;&lt;br /&gt;
물론 투자자들의 모든 예치금을 말하는것은 아니고 사용자에게 여러 암호화폐로 환전할 수 있도록 만들어진 유동성 풀을 제공하고
암호화폐 투자자들이 서로 다른 암호화폐 둘을 1대1비율로 예치합니다. &lt;br /&gt;&lt;br /&gt;
이 유동성풀에 있는 암호화폐로 사용자에게 환전서비스를 제공합니다. 이때 환전 서비스를 스왑이라하고
스왑시 발생하는 수수료를 위의 암호화폐 투자자들에게 배분합니다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 디파이와 서비스</summary></entry><entry><title type="html">블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp</title><link href="https://nageom.github.io/blockchain-start(3)" rel="alternate" type="text/html" title="블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(3)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(3)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;코인과 토큰의 차이.&lt;/li&gt;
  &lt;li&gt;ERC20?&lt;/li&gt;
  &lt;li&gt;Dapp(디앱)??&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. 코인과 토큰의 차이.&lt;/strong&gt;&lt;br /&gt;
코인은 &lt;strong&gt;&lt;u&gt;자체적인 블록체인 네트워크&lt;/u&gt;&lt;/strong&gt;를 가지고 웅용되어 지는 것&lt;br /&gt;
토큰은 코인의 &lt;strong&gt;&lt;u&gt;기존 블록체인 네트워크&lt;/u&gt;&lt;/strong&gt;를 차용해서 운용되어 지는 것이다. &lt;br /&gt;
대표적인 비트코인, 이더리움 등을 제외한 대부분은 토큰이다. (이더리움의 코인 이름은 이더..!) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다고 영원히 토큰이냐? 그것도 아닙니다. 메인넷이라고 기존에 존재하는 플랫폼에 종속 되어있지 않고
독립적으로 생태계를 구성하는 것이 있습니다.&lt;br /&gt;
토큰에서 코인이 되는 과정 &lt;br /&gt;
기존 블록체인 네트워크를 기반으로 토큰을 제작하고, ICO(initial coin offering) 들을 통해 대중에게 알립니다.
(ICO: 백서를 공개한 후 신규 암호화폐를 발행해 투자자들로부터 사업 자금을 모집하는 방식)
이후 테스트넷으로 실제 실행이 잘되는지 확인하는 과정을 거쳐 이가 성공하면 메인넷이 릴리즈 된다.&lt;br /&gt;
독립적인 플랫폼으로 거래하고 생태계 구성이 된다는 것이다. 이거시! 토큰에서 코인으로 업그레이드가 되는 과정이다.
예) 이오스토큰 -&amp;gt; 이오스 코인&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.이제 ERC20이 무엇인가&lt;/strong&gt;&lt;br /&gt;
이더리움의 자체 블록체인 네트워크 상에서 발행되는 &lt;u&gt;토큰의 호환성을 보장&lt;/u&gt;하기 위한 표준 사양을 말합니다. 
위의 정의처럼 토큰은 블록체인 네트워크를 사용하여 만들어진 것이잖아요? 만들때 최소한의 조건이 ERC20인거죠.&lt;br /&gt;
그래서 ERC20의 표준 사양을 맞춘 토큰을 ERC20토큰이라 부릅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Dapp(디앱)??&lt;/strong&gt;&lt;br /&gt;
디앱이란 블록체인을 기반으로 돌아가는 애플리케이션을 말한다.&lt;br /&gt;
모바일의 OS 안드로이드와 iOS 처럼 블록체인계의 OS에서 돌아가는 애플리케이션.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/blockchain3.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;디앱은 블록체인에서 스마트 계약이 도입되면서 생겨났다(이더리움이 처음 도입).&lt;br /&gt; 스마트 계약이 없는 비트코인에는 디앱이 존재하지 않는다.
스마트컨트랙트가 포함된 블록체인 네트워크 위에서 돌아가는 어플리케이션이라 정리할 수 있다. &lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;예를 들자면&lt;/strong&gt; 배달의 민족 어플에 만약 30분 안에 배달이 완료되면 자동 결제가 되는 스마트컨트랙트를 추가한다면 Dapp이라 할 수 있다.
이처럼 디앱의 종류는 코인관련 뿐만 아니라 &lt;strong&gt;안드로이드의 앱처럼 모든 앱&lt;/strong&gt;이 될 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 여러 블록체인 플랫폼들이 있는데 대표주자가 이더리움이다. 처음 블록체인에 스마트 계약을 도입하며
디앱을 탄생시킨게 이더리움이기도하고 디앱 수로 봤을때도 1위가 이더리움, 2위는 이오스. 그 수가 
이더리움이 2,341개이상, 이오스는 235개로 차이가 엄청나다.&lt;/p&gt;

&lt;p&gt;본래 각각의 앱을 사용하면서 발생되는 일정부분의 포인트를 통합하여 사용하는 것은 같은 회사계열의 앱이 아닌 이상 거의 불가능하지만
이더리움 플랫폼에서는 각각의 디앱이 발행한 &lt;u&gt;토큰들을 통합&lt;/u&gt;하여 현금화하는 것이 가능하다.&lt;/p&gt;

&lt;p&gt;즉, 대표적인 이더리움 블록체인에서는 이더(ETH)가 사용되고, 
이더리움 블록체인 상의 디앱은 또 다른 다양한 분야에 적용될 수 있는 
각각의 솔루션으로 그에 맞는 토큰을 발행하는 것이다. 이때 호환성을 위해 정한 표준 토큰 스펙이 ERC-20이라는 것! _ 한 줄 정리&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내용 계속 추가 할 예정&lt;/strong&gt;&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 코인과 토큰의 차이. ERC20? Dapp(디앱)??</summary></entry><entry><title type="html">블록체인의 시작(2)_스마트컨트랙트</title><link href="https://nageom.github.io/blockchain-start(2)" rel="alternate" type="text/html" title="블록체인의 시작(2)_스마트컨트랙트" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(2)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(2)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h6&gt;스마트컨트랙트는 블록체인 위에 올리는 코드이다. &lt;/h6&gt;
&lt;p&gt;본래는 코드대로 실행되는 계약 시스템이였지만 블록체인에 도입됨으로써 취약했던 보안과 신뢰를 보완하여 세상에 나왔다.&lt;/p&gt;

&lt;p&gt;스마트컨트랙트의 사전의미는 계약 당사자가 사전에 협의한 내용을 미리 프로그래밍하여 전자계약서 문서 안에 넣어두고,
이 계약 조건이 모두 충족되면 자동으로 계약 내용이 실행되도록 하는 시스템이다. 라고한다.&lt;/p&gt;

&lt;p&gt;단순단순히 &lt;u&gt;~할 경우 ~한다.&lt;/u&gt; 라는 코드로 볼 수 있다.
내가 봤을때 코드, 계약대로 실행되는 자동화 시스템을 말하는 것 같다. 계약이니 양방향의 동의를 얻은!&lt;/p&gt;

&lt;p&gt;한 예시로, 사업을 시작하기위해 투자를 받고 있는 예비 사업자가 있다고 하면 목표 금액을 채우지 못했을시에 사업자는 사업을 시작하지 못하고
투자자들은 돈을 돌려받지 못하는 경우의 부담감으로 투자를 주저한다.&lt;/p&gt;

&lt;p&gt;이때 목표액 이더리움 천 개를 채우지 못하면 투자 금액을 모두 돌려준다는 계약조건을 건다.&lt;br /&gt;
계약대로 투자금을 모으는 기간 동안은 지갑이 락이 걸려 출금이 금지되고 
기간이 끝나고 개수를 채우지 못했을 때
자동적으로 투자자들의 투자금이 그대로 돌려받게 되는 계약을 이행하는 것이 스마트 컨트랙트이다.&lt;/p&gt;

&lt;p&gt;지금의 은행자동이체 또한 스마트컨트랙트와 같다. 
지금의 자동이체는 은행이 주체이지만 블록체인 위의 스마트컨트랙트는 주체가 모두가 됨으로써 이의 보안이 더욱 올라간다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;이제 스마트컨트랙트? 조건을 붙여 자동실행 되도록 하는 계약이고 코드! Um~ 느낌이 왔다면&lt;/p&gt;

&lt;p&gt;그럼 다음은 ERC20에 대해 알아보자.&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 스마트컨트랙트는 블록체인 위에 올리는 코드이다. 본래는 코드대로 실행되는 계약 시스템이였지만 블록체인에 도입됨으로써 취약했던 보안과 신뢰를 보완하여 세상에 나왔다.</summary></entry><entry><title type="html">블록체인의 시작(1)_개념</title><link href="https://nageom.github.io/blockchain-start(1)" rel="alternate" type="text/html" title="블록체인의 시작(1)_개념" /><published>2021-10-31T09:00:00+09:00</published><updated>2021-10-31T09:00:00+09:00</updated><id>https://nageom.github.io/blockchain-start(1)</id><content type="html" xml:base="https://nageom.github.io/blockchain-start(1)">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt; 블록체인 카테고리&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(1)&quot;&gt; 블록체인의 시작(1)_개념 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(2)&quot;&gt; 블록체인의 시작(2)_스마트컨트랙트 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(3)&quot;&gt; 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(4)&quot;&gt; 블록체인의 시작(4)_디파이 &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(5)&quot;&gt; 블록체인의 시작(5)_블록체인 이해하기  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(6)&quot;&gt; 블록체인의 시작(6)_스마트컨트랙트 작성(1)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(7)&quot;&gt; 블록체인의 시작(7)_스마트컨트랙트 작성(2)  &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./blockchain-start(8)&quot;&gt; 블록체인의 시작(8)_ERC20토큰 만들기   &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;블록체인을 좀 쉽고 빠르게 습득하기 위한 포스팅. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 블록체인을 공부할 때에는 읽어도 정말 읽어도 몰랐다 &lt;br /&gt;
순서대로 했다면 이해가 더 쉬웠겠다라고 느꼈던 그대로 &lt;br /&gt;
기초부터 정리해봤다. &lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;블록체인이란?&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;블록은?&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;블록체인 : 말그대로 블록이 체인 형태로 이어져있는 형태. 개발자에게겐 노드가 체인처럼 쭉 연결되어 있는셈. 
왜 여기저기에서 블록체인 이야기가 들릴까?
그건 블록체인이 디지털 데이터를 신뢰할 수 있게 만들어준 기술이기 때문이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/blockchain.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
 블록체인은 탈중앙화(decentralization)기술이다.  &lt;br /&gt;
우리는 입출금을 하기 위해서 은행을 이용한다. 나의 계좌내역은 당연히 은행이 관리한다.
내가 친구에게 돈을 송금한 것은 은행이 증언해준다. 이렇게 어떠한 정보나 권한이 한 곳에 집중되어있는 기존방식의
보안은 은행에 집중되어있고 그만큼 해킹의 주 타겟이 된다.&lt;/p&gt;

&lt;p&gt;반대로 블록체인은 정보나 권한이 분배되어 분산되어있는 방식을 갖는다. 
내 거래내역이 은행창고에만 있는 것이 아니라 모두가 소유함으로써, 
내 거래내역을 가진 모두가 증인이며 증거가 된다.&lt;/p&gt;

&lt;p&gt;더 쉽게 생각하면, 사탕을 은행에 숨기던 방식  - 은행이 강도당하면 내 사탕도 사라짐&lt;br /&gt;
사탕을 내 이름을 적어서 사거리 신호등에 둔다 - 모두가 감시자이자 목격자. 안정성이 보장된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;은행의 데이터를 조작해서 송금 내역에 변화를 줄 수 있다면
블록체인에 올라와있는 &lt;u&gt;블록은 수정,삭제가 불가능한 형태이다.&lt;/u&gt; (아래 설명)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 블록을 알아보자. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;블록은 ? 개발자는 노드를 상상하면 이해가 쉽다. &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/blockchain/blockchain2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;strong&gt;블록의 구조&lt;/strong&gt;부터 보자. 
블록은 데이터를 저장하는 단위로 블록헤더와 블록바디로 나누어져서 &lt;br /&gt;
블록헤더에는 버전, 이전 블록해시, 머클루트, 타임, 난이도 목표, 논스(nounce, 암호화와 관련되는 임의의 수) &lt;br /&gt;
블록바디에는 트랜잭션들(거래내용)이 담아져있다. &lt;br /&gt; 
트랜잭션에 많은 거래내역이 담겨있다. 일정한 시간동안의 거래내역이 한 블록에 담긴다.(약 10분이며, 코인마다 다름 )&lt;/p&gt;

&lt;p&gt;주목해야하는 부분은 블록해시이다. 이는 블록의 주소이자 이름이라 할 수 있다. 
블록은 이전 블록해시를 갖음으로써 서로 연결된 형태의 블록체인이 완성된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 위에서 말한 &lt;u&gt;블록체인의 블록은 수정, 삭제가 불가능한 형태&lt;/u&gt;라 한 이유가 이제 나온다.&lt;br /&gt;
블록해시란&lt;br /&gt;
블록헤더의 정보들(버전, 이전 블록해시, 머클루트, 타임, 난이도 목표, 논스)을 모두 합산한 후 SHA256으로 변환하여 만드는 해시 값이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, A-B-C-D-E 로 이루어진 블록체인의 B.블록의 데이터를 수정하면 그 뒤의 C의 이전 해시값이 바뀌고 C의 해시값 또한 변경되고 D, E 의 해시값 
또한 변화가 있게된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인은 서로가 감시자인 형태로 블록의 정보를 모두 공유한다. 여기에 해당되는 ‘모두’의 과반수가 갖는 정보를 신뢰하는 형태를 띄기 때문에
수정을 위해서는 이 과반수가 가진 C,D,E 블록의 해시값을 손봐야한다. 이는 천문학적인 시간과 머니가 들어 불가능에 가깝다!&lt;/p&gt;

&lt;p&gt;이로써 블록체인은 보안을 유지할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;블록체인은 새로운 신뢰/보안의 형태이다. 이제 시작이고 가야할 길이 멀고도 험하다 
 ERC20? 토큰이랑 코인? 스마트컨트랙트? 블록체인을 공부하면서 어려웠던 이것들 모두 짚고 넘어가보자.&lt;/p&gt;

&lt;p&gt;다음은 스마트컨트랙트에 대해 알아볼거다.&lt;/p&gt;</content><author><name>nageom</name></author><category term="blockchain" /><summary type="html">블록체인 카테고리 블록체인의 시작(1)_개념 블록체인의 시작(2)_스마트컨트랙트 블록체인의 시작(3)_ERC20토큰과 스마트컨트랙트, Dapp 블록체인의 시작(4)_디파이 블록체인의 시작(5)_블록체인 이해하기 블록체인의 시작(6)_스마트컨트랙트 작성(1) 블록체인의 시작(7)_스마트컨트랙트 작성(2) 블록체인의 시작(8)_ERC20토큰 만들기 블록체인을 좀 쉽고 빠르게 습득하기 위한 포스팅.</summary></entry><entry><title type="html">쓰레드-동기화(Synchronization) (4)</title><link href="https://nageom.github.io/java-thread(5)" rel="alternate" type="text/html" title="쓰레드-동기화(Synchronization) (4)" /><published>2021-08-05T09:14:00+09:00</published><updated>2021-08-05T09:14:00+09:00</updated><id>https://nageom.github.io/java-thread(5)</id><content type="html" xml:base="https://nageom.github.io/java-thread(5)">&lt;p&gt;오늘은 &lt;u&gt;'사용해본적은 있지만 자세히는 모른다 시리즈'&lt;/u&gt;의 synchronized에 대해 포스팅해보려한다. 가보자&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 쓰레드가 진행 중인 작업을 다른 쓰레드가 간섭하지 못하도록 막는 것을 ‘쓰레드의 동기화 (synchronization)’라고 한다.&lt;/p&gt;

&lt;p&gt;알다시피 싱글 쓰레드와 다르게 멀티 쓰레드는 여러 쓰레드들이 같은 프로세스 내의 자원을 공유해 작업하기 때문에
서로의 작업에 영향이 갈 수 밖에 없다. 
A 쓰레드가 작업 중 B쓰레드가 공유자원을 임의로 변경한다면,
A 쓰레드가 작업을 마쳤을 때 원래 의도했던 것과는 다른 결과를 얻을 수 있다. 
이러한 일의 방지를 위해 도입된 개념이 ‘임계 영역(CRITICAL SECTION)’과 ‘잠금(LOCK)’이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘임계 영역(CRITICAL SECTION)’과 ‘잠금(LOCK)’&lt;/strong&gt;
공유 데이터를 사용하는 코드 영역을 임계 영역으로 지정하고, 
공유 데이터(객체)가 가지고 있는 lock을 획득한 단 하나의 쓰레드만 이 영역 내의 코드를 수행할 수 있게 한다 .
그리고 해당 쓰레드가 임계 영역 내의 모든 코드를 수행하고 벗어나서 lock을 반납해야만
다른 쓰레드가 반납된 lock을 획득하여 임계 영역의 코드를 수행할 수 있게 된다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(JDK1.5 이후
java.util.concurrent.locks / 
java.util.concurrent.atomic 패키지 지원 )&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;임계 영역을 지정하는데는 두 가지 방법이 있다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//1. 메서드 전체를 지정&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 쓰레드는 synchronized메서드가 호출된 시점부터 해당 메서드가 포함된 객체의 lock을 얻어 작업을 수행하며
메서드가 종료되면 lock을 반환한다. 



*/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//2. 특정한 영역을 지정&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;객체의&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;참조변수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
메서드 내의 코드 일부를 블럭{}으로 감싸고 블럽 앞에 synchronized(참조변수)를 붙이는 것으로 
이때의 참조변수는 락을 걸고자하는 객체를 참조하는 것이어야 한다 

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 두 방법 모두 lock의 획득과 반납이 모두 자동적으로 이루어진다. 
참고로 synchronized블럭으로 임계 영역을 최소화해서 보다 효율적인 프로그램이 되도록 노력하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;출금하려는 금액이 잔고보다 작을 경우에만 출금할 수 있는 은행시스템에서 필요한 쓰레드 동기화
&lt;script src=&quot;https://gist.github.com/nageom/ba97d73b55ce060e79fb91dedc72723d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;24 줄의 메서드를 동기화하지 않으면 한 쓰레드가 출금 중, 다른 쓰레드가 balance에 영향을 줘서
balance가 음수가 되어버린다. &lt;synchronized 를=&quot;&quot; 지우고=&quot;&quot; 결과를=&quot;&quot; 확인해보자=&quot;&quot;&gt;&lt;/synchronized&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;알게된것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 예제에서 쓰레드들이 구현될때 account 객체를 따로 생성해 가지고 있을거라 생각하고
동기화 없이도 balance가 음수가 되지않을거라고 예상했고 이는 틀렸다.&lt;/p&gt;

&lt;p&gt;내가 만든 RunnableEx 안의 멤버 또는 메서드들은 모두
메인에서 구현된 쓰레드들이 같이 공유한다. 라는걸 기억해두자.&lt;/p&gt;

&lt;p&gt;참고문서 - 자바의 정석&lt;/p&gt;</content><author><name>nageom</name></author><category term="java" /><summary type="html">오늘은 '사용해본적은 있지만 자세히는 모른다 시리즈'의 synchronized에 대해 포스팅해보려한다. 가보자</summary></entry></feed>