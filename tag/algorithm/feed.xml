<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://nageom.github.io/tag/algorithm/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://nageom.github.io/" rel="alternate" type="text/html" />
  <updated>2021-06-24T18:30:41+09:00</updated>
  <id>https://nageom.github.io/tag/algorithm/feed.xml</id>

  
  
  

  
    <title type="html">nageom’s blog | </title>
  

  
    <subtitle>IT 공부방</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">정렬 알고리즘의 개요와 선택정렬(Select Sort)</title>
      <link href="https://nageom.github.io/algorithm-select-sort" rel="alternate" type="text/html" title="&lt;정렬&gt; 정렬 알고리즘의 개요와 선택정렬(Select Sort)" />
      <published>2021-06-22T09:14:00+09:00</published>
      <updated>2021-06-22T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-select%20sort</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-select-sort">&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;h3&gt;알고리즘의 시작, 정렬 &lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h6&gt;왜 알고리즘 공부는 정렬부터할까?&lt;/h6&gt;
&lt;p&gt;정력만큼 알고리즘의 효율성 차이를 극명하게 보여주는 것이 없기 때문이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;비효율 정렬 -&amp;gt; 효율 정렬 순으로 공부! &lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;[가장 작은 거을 선택해서 제일 앞으로 보내면 어떨까?]&lt;/h6&gt;
&lt;p&gt;(구현하긴 쉽지만 효율적이진 않다)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1 10 5 8 7 6 4 3 2 9&lt;br /&gt;
1 2 5 8 7 6 4 3 10 9&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt; 구현해보자 &lt;/h6&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//선택정렬  &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;


	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arraySize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//모든 원소들보다 큰 숫자&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arraySize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%d &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;



&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6&gt;[선택 정렬의 시간 복잡도 O(N^2) ]&lt;/h6&gt;
&lt;p&gt;int arr[] = {1 10 5 8 7 6 4 3 2 9} 를 정렬하기위해 비교하는 횟수&lt;br /&gt;
10 + 9 + 8 + 7 + .. + 1&lt;br /&gt;
=&amp;gt; 등차수열 공식으로 봤을 때&lt;br /&gt;
10* (10+1)/2 = 55 번의 비교연산을 하게 된다.&lt;br /&gt;
=&amp;gt; N * (N+1)/2&lt;br /&gt;
일반적으로 컴퓨터에서는 N이 굉장히 큰 수라는 가정하에&lt;br /&gt;
2로 나눈값이 별다른 큰 의미가 없다고 보고 간단하게 나누고 더하는 연산을 무시한다&lt;br /&gt;
=&amp;gt; N&lt;em&gt;N 으로 표기&lt;br /&gt;
=&amp;gt; O(N&lt;/em&gt;N)  &lt;br /&gt;
이 때 사용하는 것이 &lt;strong&gt;‘빅오 표기법(big-O notation)’&lt;/strong&gt; &lt;br /&gt;
&lt;u&gt;특정한 알고리즘의 수행시간을 가장 간략하게 표기하는것 &lt;/u&gt;&lt;br /&gt;
그리하여 선택 정렬의 시간 복잡도가 O(N^2)라 말한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;x값 처리할 데이터가 많을수록 연산 횟수가 엄청나게 증가한다. &lt;br /&gt;
x제곱 그래프 
&lt;img src=&quot;../../assets/built/images/algorithm/sort/select sort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;References&lt;br /&gt; 
https://www.youtube.com/watch?v=8ZiSzteFRYc&amp;amp;list=PLRx0vPvlEmdDHxCvAQS1_6XV4deOwfVrz&amp;amp;index=2 &lt;br /&gt;
강의 최고시다..&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사진&lt;br /&gt;
https://ko.depositphotos.com/10608715/stock-illustration-drawing-of-graph-on-squared.html&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">알고리즘의 시작, 정렬</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">버블정렬(Bubble Sort)</title>
      <link href="https://nageom.github.io/algorithm-bubble-sort" rel="alternate" type="text/html" title="&lt;정렬&gt;버블정렬(Bubble Sort)" />
      <published>2021-06-22T09:14:00+09:00</published>
      <updated>2021-06-22T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-bubble%20sort</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-bubble-sort">&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;h4&gt;버블정렬 &lt;/h4&gt;
&lt;/blockquote&gt;

&lt;h6&gt;[옆에 있는 값과 비교해서 더 작은 값을 앞으로 보내는 방법]&lt;/h6&gt;
&lt;p&gt;직관적이고 쉽게 구현할 수 있지만 정렬 알고리즘 중에서 가장 비효율적인 알고리즘이다!&lt;br /&gt;
&lt;u&gt;1 10&lt;/u&gt; 5 8 7 6 4 3 2 9    &amp;lt;- 두개를 한 묶음으로 비교&lt;br /&gt;
1 &lt;u&gt;10 5 &lt;/u&gt;8 7 6 4 3 2 9 &lt;br /&gt;
1 10 &lt;u&gt;5 8 &lt;/u&gt; 7 6 4 3 2 9 &lt;br /&gt;&lt;br /&gt;
(1회전)&lt;br /&gt;
1 5 8 7 6 4 3 2 9 10 &amp;lt;- 가장 큰 값이 맨 뒤로 간다&lt;br /&gt;
                              그래서 1회전 반복때마다 반복 횟수를 줄여준다.&lt;br /&gt;
(2회전)&lt;br /&gt;
1 5 7 6 4 3 2 8 9 10  &lt;br /&gt;&lt;br /&gt;
결과&lt;br /&gt;
1 2 3 4 5 6 7 8 9 10&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt; 구현해보자 &lt;/h6&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%d &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6&gt;[버블 정렬의 시간 복잡도 O(N^2) ]&lt;/h6&gt;
&lt;p&gt;&lt;u&gt;1 10&lt;/u&gt; 5 8 7 6 4 3 2 9&lt;br /&gt;
=&amp;gt; 10 + 9 + … + 1&lt;br /&gt;
=&amp;gt; 10 + 9 + … + 1&lt;br /&gt;
=&amp;gt; 등차수열&lt;br /&gt;
=&amp;gt; N* (N+1)/2&lt;br /&gt;
=&amp;gt; O(N^2)&lt;br /&gt;&lt;/p&gt;
&lt;h6&gt;선택정렬과 동일한 시간 복잡도이지만 왜 가장 비효율적인 정렬이라 하지?&lt;/h6&gt;
&lt;p&gt;&lt;br /&gt;
선택정렬은 가장 작은 데이터를 골라 마지막에 자리 이동을 한다. &lt;br /&gt;즉, 1회전에 자리이동 1회&lt;br /&gt; 
버블정렬은 매번 교체를 해줘야하기 때문에 더 오랜 시간이 걸린다. &lt;br /&gt; 즉, 1회전에 자리이동 여러번  &lt;br /&gt;
그래서 정렬중 가장 비효율적 정렬이라 함! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References &lt;br /&gt;
https://www.youtube.com/watch?v=EZN0Irp2aPs&amp;amp;list=PLRx0vPvlEmdDHxCvAQS1_6XV4deOwfVrz&amp;amp;index=3&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">버블정렬</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">삽입 정렬(Insertion Sort)</title>
      <link href="https://nageom.github.io/algorithm-insertion-sort" rel="alternate" type="text/html" title="&lt;정렬&gt; 삽입 정렬(Insertion Sort)" />
      <published>2021-06-22T09:14:00+09:00</published>
      <updated>2021-06-22T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-insertion%20sort</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-insertion-sort">&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;h3&gt; 삽입 정렬(Insertion Sort) &lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h6&gt;[각 숫자를 적절한 위치에 삽입하는 방법 ]&lt;/h6&gt;
&lt;p&gt;필요할 때만 위치를 바꾸기 떄문에 &lt;br /&gt;
버블 정렬, 선택정렬보다 더 빠르다. (O(N^2) 중에서)&lt;br /&gt;
그렇지만 정렬이 되어있지 않은 경우는 다름없는 O(N^2) 이기때문에 항상 비효율적이지 않다고는 말할 수 없다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;int arr[10]= {1,10,5,8,7,6,4,3,2,9}&lt;br /&gt;
처음부터 하나씩 앞의 배열값들과 비교하며 선택값을 본인보다 작은값을 만났을때 작은값 &lt;br /&gt;
바로 뒤에 삽입해준다.&lt;br /&gt;
버블 정렬과 뭐가 다른가 할 수 있는데, &lt;br /&gt;
삽입 정렬은 앞의 원소들이 이미 정렬이 되어있다 가정하기 때문에 &lt;br /&gt;
작은값을 만났을때에만 조심스럽게 비교연산을 시작해서 속도가 줄어들 수 밖에 없다. &lt;br /&gt;&lt;br /&gt;
1 5 10 8 7 6 4 3 2 9&lt;br /&gt;
1 5 8 10 7 6 4 3 2 9&lt;br /&gt;
1 5 7 8 10 6 4 3 2 &lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;공부하다 드는 생각&lt;/h6&gt;
&lt;p&gt;그럼 말 그대로 삽입정렬이라 삽입을 하게 되면 그 자리에있던 데이터들이 한 칸씩 자리 이동을 해주어야한다.
그럼 삽입이 아니고 변경인가라고 생각했는데  &lt;br /&gt;&lt;br /&gt;
코드를 보니 느낌은 삽입이고 자리의 변경이 맞았다. &lt;br /&gt;
if (array[i] &amp;gt; array[i+1]) 이 경우에만 자리를 바꿔준다.  &lt;br /&gt;
무조건 비교하는 정렬법이 아니라 이미 앞 원소들은 정렬이 된 상태이기 때문에 비교할 필요가 없는것이 장점이다.  &lt;br /&gt;
이러한 특징으로 특정한 상황에서 속도가 굉장히 빠를 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;코드를 살펴보자&lt;/h6&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//삽입 정렬을 만들어 보자&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 앞의 값이 나보다 클때에만 while문 &lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		
	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%d &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h6&gt;[버블 정렬의 시간 복잡도 O(N^2) ]&lt;/h6&gt;

&lt;p&gt;정렬이 거의 되어있지 않은 상황에는 &lt;br /&gt;
10+8+7+…+1 으로 O(N*N) 의 시간복잡도에 충실하게 되지만 &lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;'거의 정렬된 상태'&lt;/h6&gt;
&lt;p&gt;라면 정렬이 거의 되어있는 &lt;br /&gt;
arr={2,3,4,5,6,7,8,9,10,1}&lt;br /&gt;
&lt;br /&gt;
‘1’을 빼고는 거의 한번씩의 연산만 지나치게되어 아주 빠른 정렬 속도 
즉, 퀵 정렬 보다 더 빠르거나 동등한 속도를 낼 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References &lt;br /&gt;
https://www.youtube.com/watch?v=16I9Z7bS1iM&amp;amp;list=PLRx0vPvlEmdDHxCvAQS1_6XV4deOwfVrz&amp;amp;index=5&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">삽입 정렬(Insertion Sort) [각 숫자를 적절한 위치에 삽입하는 방법 ] 필요할 때만 위치를 바꾸기 떄문에 버블 정렬, 선택정렬보다 더 빠르다. (O(N^2) 중에서) 그렇지만 정렬이 되어있지 않은 경우는 다름없는 O(N^2) 이기때문에 항상 비효율적이지 않다고는 말할 수 없다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">알고리즘의 시작</title>
      <link href="https://nageom.github.io/algorithm-start" rel="alternate" type="text/html" title="알고리즘의 시작" />
      <published>2021-06-21T09:14:00+09:00</published>
      <updated>2021-06-21T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-start</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-start">&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;본격적으로 알고리즘 공부를 시작해보려한다. 좋은 강의영상을 찾아서 기분이 조크등요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;항상 공부하기 전 왜 이걸 공부해야하는가에 대한 답변&lt;/h6&gt;
&lt;p&gt;알고리즘은 ‘개발’의 전체 과정에 사용이 되기때문.&lt;br /&gt;
실제 프로그램을 개발할 때 효율적인 알고리즘을 적용함으로써 원하는 결과를 도출해내기 위함. 이라고 하는데 
예시를 보면 더 이해가 쉬울 것이다.&lt;br /&gt;
ex1) 스케줄 관리 프로그램 : 예전에 구현해보려 애썼던 달력에서 특정한 달에 해당하는 일 수 구하기&lt;br /&gt;
ex2) 내비게이션 프로그램 : 여러 개의 중간 지점을 거쳐서 특정 지저으로 갈 때 가장 빠른 경로찾기&lt;br /&gt;
-&amp;gt; 다익스트라 알고리즘, 플로이드 와샬 알고리즘&lt;br /&gt;
ex3) 게시판 프로그램 : 한 페이지당 게시글을 10개씩 출력해야 하는데 어떻게 출력할까&lt;br /&gt;
-&amp;gt; 페이징 처리 &lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;왜 공부해야할까?&lt;/h6&gt;
&lt;p&gt;프로그래머의 숙명.. &lt;br /&gt;&lt;br /&gt;
사실 자바를 이용해 웹을 만들다보면 그렇게 복잡한 알고리즘을 사용할 일이 없는데 &lt;br /&gt;
취업시에 개발자의 역량을 확인할 수 있는 수단으로 사용되기도하고( 복잡한 알고리즘이 가능하면 어떤 일도 수월히 풀 수 있을것이라는 판단하에 )&lt;br /&gt;
알고리즘 구현이 가능하다면 어떤 개발에서도 라이브러리를 쓸게 아니라 만들어서 마음대로 커스터마이징이 가능하다는점이&lt;br /&gt;
큰 이유인것같다.&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;개발환경? &lt;/h6&gt;
&lt;p&gt;C언어로 공부할거다 신난다 오랜만에 C언어&lt;br /&gt;
C언어 개발환경은 코드 블럭쓰 또는 비주얼스튜디오를 사용하는데&lt;br /&gt;
알고리즘 공부만 할 경우에는 비주얼스튜디오 보다 더 가벼운 코드 블럭쓰를 사용하는것이 좋다.&lt;br /&gt;
https://sourceforge.net/projects/orwelldevcpp/&lt;/p&gt;

&lt;p&gt;References&lt;br /&gt; 
우연히 알고리즘 강의를 찾아 알게 되었는데 가려웠던곳 다 긁어주시는 선생님.. 재밌게 공부할 수 있을것같다.&lt;br /&gt;
https://www.youtube.com/watch?v=qQ5iLNjpxSk&amp;amp;list=PLRx0vPvlEmdDHxCvAQS1_6XV4deOwfVrz&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">본격적으로 알고리즘 공부를 시작해보려한다. 좋은 강의영상을 찾아서 기분이 조크등요!</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">hashTable과 hashMap의 차이는?</title>
      <link href="https://nageom.github.io/algorithm-basic" rel="alternate" type="text/html" title="hashTable과 hashMap의 차이는?" />
      <published>2021-06-02T09:14:00+09:00</published>
      <updated>2021-06-02T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-basic</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-basic">&lt;hr /&gt;
&lt;p&gt;해시테이블과 해시맵의 차이를 알아보기 전, 어떤 것 인지부터 알아보도록 하겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;해시테이블(Hash Table)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;키(key)와 값 (value)이 하나의 쌍으로 이루어진 데이터 구조입니다.&lt;/li&gt;
  &lt;li&gt;해시테이블은 내부적으로 배열(버킷)을 사용하여 키를 인덱스값으로 놓고 배열(버킷)에 값을 저장하는 형태입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/algorithm/hashTable/hashTable.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;key와 value가 put()메서드로 저장될때,  &lt;br /&gt;
 key값에 해시함수를 적용해 배열의 index를 생성해냅니다. 
and 그 index스에 해당 value가 저장되는것이죠. &lt;br /&gt;
이 때, 실제 값이 저장되는 배열을 버킷 or 슬롯이라 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시함수는?
고유한 인덱스 값을 생성하는 메서드입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대표적인 해시 함수
-&amp;gt; 1. Division Method: 주소=입력값 % 테이블 크기 &lt;br /&gt;
테이블의 크기를 소수로 정해 2의 제곱수와 먼 값을 사용하는 것이 좋다.
-&amp;gt; 2. Digit Folding : 
각 Key 의 문자열을 아스키 코드로 바꾸고, 값을 합한 데이터를 데이터 내의 주소로 사용하는 방법
-&amp;gt; 3. Multiplication Method: 숫자로 된 Key값 -&amp;gt; k , 0과 1사이의 실수 -&amp;gt; A, 2의 제곱수 -&amp;gt; 을 이용하여
 h(k) = (kAmod1) x m 계산을 해준다. 
-&amp;gt; 4. Univeral Hashing : 다수의 해시함수를 만들어 집합 H에 넣어두고,
 무작위로 해시함수를 선택해 해시값을 만드는 기법&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시값이 충돌하는 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“nageom” 을 해시 함수를 돌아나온 해시값이 “dawon”의 해시함수를 돌려 나온 값과 동일하는 경우를
충돌한다 말한다.  &lt;br /&gt;
이러한 충돌을 해결하는 방법은 크게 두 가지가 있다.
&amp;lt;분리 연결법(Separate Chaining)&amp;gt;
&lt;img src=&quot;../../assets/built/images/algorithm/hashTable/hashTable.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;분리 연결법 (Separate Chaining) 위의 그림처럼 해시값이 충돌할 경우 추가 메모리를 사용하여 다음 데이터의 주소를 저장
하는 것이다. 위의 그림처럼&lt;/p&gt;

&lt;p&gt;References   &lt;br /&gt;
https://hee96-story.tistory.com/48    &lt;br /&gt;
https://mangkyu.tistory.com/102&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">해시테이블과 해시맵의 차이를 알아보기 전, 어떤 것 인지부터 알아보도록 하겠습니다. 해시테이블(Hash Table)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">알고리즘과 자료구조는?</title>
      <link href="https://nageom.github.io/algorithm-hashTable" rel="alternate" type="text/html" title="알고리즘과 자료구조는?" />
      <published>2021-06-01T09:14:00+09:00</published>
      <updated>2021-06-01T09:14:00+09:00</updated>
      <id>https://nageom.github.io/algorithm-hashTable</id>
      <content type="html" xml:base="https://nageom.github.io/algorithm-hashTable">&lt;hr /&gt;
&lt;p&gt;오늘의 주제는 알고리즘과 자료구조의 차이입니다. &lt;br /&gt;
카테고리를 정하려다보니까 궁금해지더라고요. 한번 볼까요? &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자료구조와 알고리즘의 차이를 설명할때 가장 많이 나오는 예시가 도서관이더라구요.  &lt;br /&gt;
자료구조는 ‘책장에 꽂혀있는 책들의 정리&lt;em&gt;방법&lt;/em&gt;’ -&amp;gt; ex) 알파벳순, 연도순 등 &lt;br /&gt;
알고리즘은 ‘책장에서 책을 찾는 절차’ -&amp;gt; ex) 위에서 아래, 왼쪽에서 오른쪽 또는 무작위 등&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;자료구조 + 알고리즘 = 프로그램&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
자료구조는 데이터에 편하게 접근,변경하기 위한 데이터의 저장&amp;amp;조직하는 방법을 말하는 것 입니다. 
그래서 모든 목적에 맞는 자료구조는 없다 -&amp;gt; 각 자료구조가 갖는 장점과 단점을 잘 아는 것이 중요하죠.&lt;/p&gt;

&lt;p&gt;자료구조의 간단 설명!  &lt;br /&gt;
1.배열 (Array) &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_array.png&quot; alt=&quot;ex_screenshot&quot; width=&quot;800&quot; class=&quot;center&quot; /&gt;
&lt;br /&gt;
2.큐 (Queue) &lt;br /&gt;
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_queue.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
참고 그림처럼 마치 다 쓴 두루마리 휴지심처럼 입구와 출구가 두 개 있는 구조. &lt;br /&gt;
입구의 주소를 rear로 명시, 출구의 주소를 제일 처음들어온 친구의 주고 front로 명시해두어서 &lt;br /&gt;
데이터를 넣을때는 rear뒤로, 삭제 시에는 front에 있는 데이터를 삭제하고 front는 다음 주소로 
이동합니다. –&amp;gt; 기억을 더듬으며 적은거라 수정 요망!! :)
FIFO(First In First Out)&lt;/p&gt;

&lt;p&gt;3.스택 (Stack)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_stack.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
입/출구가 하나뿐이라 마지막에 넣은 반찬이 제일 위에 있어서 먼저 꺼내먹을 수 밖에 없는 구조.  &lt;br /&gt;
LIFO(Last In First Out)&lt;/p&gt;

&lt;p&gt;4.연결 리스트(Linked List)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_list.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
한 클래스가 데이터와 링크를 멤버로 갖고있는것입니다 &lt;br /&gt;
그래서 클1, 클2, 클3 이렇게 차례로 연결 되어있다면 &lt;br /&gt;
클1(“데이터1”, head의 주소), 클2(“데이터2”, 클1의 주소), 클3(“데이터3”, 클2의주소)… &lt;br /&gt;
이렇게 자기 앞에 주소를 갖고 찾아가는식으로 연결연결 되어있는 자료구조입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;단일 연결 리스트, 단일 원형 연결 리스트, 이중 연결 리스트, 이중 원형 연결 리스트가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.트리 (Tree)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_tree.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_tree2.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.그래프 (graph)
&lt;img src=&quot;../../assets/built/images/algorithm/structure/basic_graph.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
관계를 그래프로 추상화하여 다룰 수 있다. 
Vertex 집합 V와 Edge집합 E에 대해 그래프 G=(V,E)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
여기까지 자료구조와 알고리즘의 간단! 설명 이였습니다.  &lt;br /&gt;
다음 게시물은 알고리즘을 하나씩 다뤄 볼 것입니다. 오늘도 열공!&lt;/p&gt;

&lt;p&gt;references   &lt;br /&gt;
https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘의 주제는 알고리즘과 자료구조의 차이입니다. 카테고리를 정하려다보니까 궁금해지더라고요. 한번 볼까요?</summary>
      

      
      
    </entry>
  
</feed>
