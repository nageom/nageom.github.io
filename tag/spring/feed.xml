<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://nageom.github.io/tag/spring/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://nageom.github.io/" rel="alternate" type="text/html" />
  <updated>2021-12-03T21:57:55+09:00</updated>
  <id>https://nageom.github.io/tag/spring/feed.xml</id>

  
  
  

  
    <title type="html">nageom’s blog | </title>
  

  
    <subtitle>티끌모아 공부방</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">깃 협업을 해보자</title>
      <link href="https://nageom.github.io/spring-git" rel="alternate" type="text/html" title="깃 협업을 해보자" />
      <published>2021-05-25T09:28:00+09:00</published>
      <updated>2021-05-25T09:28:00+09:00</updated>
      <id>https://nageom.github.io/spring-git</id>
      <content type="html" xml:base="https://nageom.github.io/spring-git">&lt;p&gt;이제 깃허브에 소스파일을 올린적은 있지만 협업에 사용해본적은 없다. 
취업기념 깃 공부 뿌웽웽&lt;/p&gt;

&lt;p&gt;(레파지토리 주인)&lt;/p&gt;

&lt;p&gt;우선적으로  알아야할 개념.&lt;br /&gt;
&lt;strong&gt;깃 허브&lt;/strong&gt; 레파지토리는 공유할 프로젝트를 올려두는 공간(프로젝트 하나당 레파지토리 하나)&lt;br /&gt;
&lt;strong&gt;깃&lt;/strong&gt;은 내 소스코드를 이 레파지토리에 올려주는 바쁜 친구&lt;br /&gt;
그래서 소스코드 올린다고 할 때, 깃허브에 가입하고 레파지토리를 만들어주고, 깃도 설치해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;과정을 보기전에 전체적인 흐름을 보고 시작하자.&lt;br /&gt;
내 PC의 workspace 내의 프로젝트가 바로 레파지토리에 연결되는 것이 아니라&lt;br /&gt;
깃 저장소라는 공간을 만들고 이 깃 저장소가 레파지토리와 연결되는 것이다.&lt;br /&gt;
그래서,&lt;br /&gt;
1) 깃 저장소를 만들고(git init)&lt;br /&gt;
2) workspace -&amp;gt; 깃 저장소 이렇게 올라간다. (commit)&lt;br /&gt;
   이때 중간에 장바구니에 add로 중간중간 공유 파일을 담아주고 깃 저장소에 올림&lt;br /&gt;
3) 깃 저장소 -&amp;gt; 레파지토리 (push)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시작은 달콤하게 깃허브 페이지에서 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;레파지토리 생성&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Settings / Mange access / Invite a collaborator 에서 조원 초대&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;깃설치 git-scm.com&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Git bash 오픈 / cd 프로젝트 폴더&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Git bash&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 등록&lt;br /&gt;
git config –global user.name “nageom”&lt;br /&gt;
git config –global user.email “nageom1123@naver.com” //깃허브 아이디&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;내 컴퓨터에 깃 저장소 만들기&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Git Bash&lt;/strong&gt; (위치 : 프로젝트 폴더 내)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git init 명령어&lt;br /&gt;
그러면 폴더 내에 .git이 생성됨을 확인할 수 있다. (깃 저장소)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;공유할 파일 외의 파일 제외&lt;/strong&gt; (.gitignore 파일 생성)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git status 명령어&lt;br /&gt;
(git로 공유한 파일과 공유할 장바구니 내부를 볼 수 있다. )&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;code .  명령어 (visual code가 열림)&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;vs에서 .gitignore 파일 생성 (깃에게 제외할 파일을 알려줌)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;.gitignore 파일에 제외할 파일 이름 적음&lt;br /&gt;
bin&lt;br /&gt;
.classpath&lt;br /&gt;
.project&lt;br /&gt;
.settings&lt;br /&gt;
이런식&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;git status로 파일 이름 하나 적을때마다 공유하는 파일 이름 확인 (빨간글씨)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;파일 -&amp;gt;  장바구니&lt;/strong&gt; (git add)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git add .gitignore&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;git add .  (전부 공유한다. )&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;장바구니 -&amp;gt; 깃 저장소&lt;/strong&gt; (git commit -m)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git commit -m “first commit”&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;깃 저장소 + 레파지토리 연동&lt;/strong&gt;(git remote add) &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git remote add origin https://githumb.com/내아이디/레파지토리이름.git (레파지토리 주소)&lt;br /&gt;
(이때, origin은 변수명이다. 뒤의 주소를 origin 으로 기억해라 라는뜻)&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;확인&lt;br /&gt;
git remote -v&lt;br /&gt;
이때, (fetch), (push) 두개 뜸&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;그럼 연결은 끝&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;깃 저장소 -&amp;gt; 레파지토리&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git push origin master&lt;br /&gt;
origin변수 주소 안에 넣어라&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그인 했는데도 안될때&lt;br /&gt;
git config –system –unset-all credential.helper&lt;br /&gt;
(로그인 정보 없애기)&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;===============================================&lt;br /&gt;
&lt;strong&gt;연결 끝한 이후&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git add .&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;git commit -m “commit”&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;git push origin master &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이제 다른 사람 레파지토리에서 내려받아 사용하는 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;레파지토리 소스코드 내려받기&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) 내 workspace에 폴더 하나 생성 (프로젝트가 될 폴더)&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) 내 pc에 저장소 만듦&lt;/strong&gt;(git init)&lt;br /&gt;
( 공유는 저장소만 가능하다. 받을 소스코드는 우선 깃 저장소에 들어가게 해야한다.)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git init&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3) 내 저장소와 공유할 레파지토리 연결&lt;/strong&gt; (git remote)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git remote add origin https://github.com/조장아이디/레파지토리이름.git&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;가져오기&lt;/strong&gt;(git pull) &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git pull origin master&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;————–위의 두 과정 또는 cmd에서 git clone https://github.com/조장아이디/레파지토리이름.git  프로젝트가될폴더이름&lt;br /&gt;
ex )  git clone https://github.com/nageom/salemarket.git salemarket&lt;br /&gt;
GitBash 위치는 salemarket 위&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이클립스 업뎃&lt;/strong&gt;&lt;br /&gt;
File/import&lt;br /&gt;
General / Projects from Folder or Archive&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;next&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;import 할 경로를 바꿔줌&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;라이브러리 Build Path는 내가 해줘야함. / 라이브러리들 우클릭 Build Path&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;=====================================================&lt;br /&gt;
연결 이 후,&lt;br /&gt;
변경사항을 받아올때도&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git pull origin master&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내 변경사항 올릴때도&lt;br /&gt;
git push origin master&lt;br /&gt;
(안될때는 pull 먼저 해줌(최신 버전으로 업뎃 하고 내꺼 올리는식)  )&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;=======================================================&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;회사에서 회사 master말고 내 브랜치를 만들어 push 할 경우&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;git checkout -b freshman&lt;/strong&gt;&lt;br /&gt;
내 브랜치 만듦 (GitBash 위치: 프로젝트 내에서 명령)&lt;br /&gt;
(freshman은 브랜치 이름)&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이제 push 될 브랜치가 master에서 freshman으로 바뀜&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;git push origin freshman&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;올림&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;이제 내 코드 봐달라고 request&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;회사 레파지토리에 접속해보면 내가 push한 내역을 Compare &amp;amp; pull request 하게 되어있음&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;클릭&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;멘트 블라블라  -&amp;gt; Create pull request&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pull requests가 생김&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이건 회사에서 확인하고 Merge ㅎㅎ &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="Spring" />
      

      
        <summary type="html">이제 깃허브에 소스파일을 올린적은 있지만 협업에 사용해본적은 없다. 취업기념 깃 공부 뿌웽웽</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring - basic</title>
      <link href="https://nageom.github.io/Spring-basic" rel="alternate" type="text/html" title="Spring - basic" />
      <published>2021-05-25T09:28:00+09:00</published>
      <updated>2021-05-25T09:28:00+09:00</updated>
      <id>https://nageom.github.io/Spring-basic</id>
      <content type="html" xml:base="https://nageom.github.io/Spring-basic">&lt;p&gt;Spring&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="Spring" />
      

      
        <summary type="html">Spring</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring - basic</title>
      <link href="https://nageom.github.io/Spring-basic-copy" rel="alternate" type="text/html" title="Spring - basic" />
      <published>2021-05-25T09:28:00+09:00</published>
      <updated>2021-05-25T09:28:00+09:00</updated>
      <id>https://nageom.github.io/Spring-basic%20copy</id>
      <content type="html" xml:base="https://nageom.github.io/Spring-basic-copy">&lt;p&gt;vscode commit test&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>nageom</name>
        
        
      </author>

      

      
        <category term="Spring" />
      

      
        <summary type="html">vscode commit test</summary>
      

      
      
    </entry>
  
</feed>
